{"version":3,"file":"index-8709c07236.css","sources":["index.scss","../../node_modules/coffeekraken-gridle/_index.scss","../../node_modules/coffeekraken-gridle/sass/_gridle.scss","../../node_modules/coffeekraken-gridle/sass/_init.scss","../../node_modules/coffeekraken-gridle/sass/_flexbox.scss","../../node_modules/coffeekraken-gridle/sass/_utils.scss","../../node_modules/coffeekraken-gridle/sass/_settings.scss","../../node_modules/coffeekraken-gridle/sass/_functions.scss","../../node_modules/coffeekraken-gridle/sass/_settings-mixins.scss","../../node_modules/coffeekraken-gridle/sass/_mixins.scss","../../node_modules/coffeekraken-gridle/sass/_api.scss","../../node_modules/coffeekraken-gridle/sass/_generate-mixins.scss","../../node_modules/coffeekraken-gridle/sass/_driver-default.scss","_color.scss","_constants.scss","_footer.scss"],"sourcesContent":["@import 'node_modules/coffeekraken-gridle/index';\n//@import 'node_modules/coffeekraken-gridle/flex';\n//@import 'grid-settings';\n@import 'color';\n@import 'constants';\n@import 'footer';\n\nhtml,\nbody {\n    height: 100%;\n    margin: 0px;\n    max-width: 100%;\n    overflow-x: hidden;\n}\n.top-image {\n    display: none;\n}\n#header {\n    height: 81px;\n    width: 100%;\n    background-color: #2a3052;\n    border-top: 2px solid #394171;\n    border-bottom: 4px solid #e98024;\n}\n#header .wrapper,\n#topbar .wrapper {\n    max-width: 960px;\n    margin: 0 auto;\n}\n#topbar {\n    background-color: #15212d;\n    width: 100%;\n    color: #fff;\n    line-height: 1;\n    font-size: 70%;\n    text-align: right;\n    padding: 3px 20px;\n    display: table;\n}\n#main {\n    width: 100%;\n    max-width: 960px;\n    margin: 0 auto;\n}\n.left,\n.right {\n    width: 45%;\n    margin: 20px;\n    display: inline-block;\n    vertical-align: top;\n}\n.right img {\n    width: 200%;\n}\n.cta {\n    margin: 30px auto;\n    text-align: center;\n}\n.contact {\n    text-align: center;\n}\nul.bullet {\n    margin: 0 !important;\n}\n.barspinner {\n    position: fixed;\n    left: 50%;\n    top: 50%;\n    margin-left: -5rem;\n    z-index: 9999;\n}\n.center {\n    text-align: center;\n}\n.half-width {\n    width: 50%;\n    float: left;\n}\n.clear {\n    clear: both;\n}\n.button span {\n    text-transform: inherit !important;\n}\n.show-on-load {\n    display: none;\n}\n/* Keep this below since css after this \n * will be interfering with small\n * screen sizes\n */\n@media only screen and (max-width: 980px) {\n    .half-width {\n        width: 49%;\n    }\n    .logo-parent {\n        margin-left: 21px;\n    }\n    .half-width  p {\n        padding: 0 20px 0 20px;\n    }\n}\n@media only screen and (max-width: 480px) {\n    .top-image {\n        display: block;\n    }\n    .half-width {\n        width: 100%;\n    }\n    .half-width p, .half-width img {\n        margin: 1em; \n    }\n    .bottom-image {\n        display: none;\n    }\n    .left,\n    .right {\n        width: 100%;\n        margin: 20px;\n        display: block;\n        vertical-align: top;\n    }\n    .clear {\n        position: sticky;\n        padding: 1px 0 1px 0;\n        bottom: 0;\n        background-color: #fff;\n        width: 100%;\n        box-shadow: 0 -2px 6px 0 rgba(0, 0, 0, 0.2);\n    }\n    p {\n        margin: 9px auto !important;\n    }\n}\n","@import \"sass/gridle\";","// |------------------------------------------------------\n// |------------------------------------------------------\n// Gridle (.scss)\n// Gridle is an one and unique grid system file that allows you to generate almost all\n// grid you've ever dreamt about.\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n// |------------------------------------------------------\n// |------------------------------------------------------\n// Copyright (c) 2014 Olivier Bossel\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions\n// of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\n// TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n\n\n\n// |------------------------------------------------------\n// |------------------------------------------------------\n// | Driver\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n$_gridle-driver : default;\n\n\n\n// |------------------------------------------------------\n// |------------------------------------------------------\n// | Default init\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n@import 'init';\n\n\n\n\n// |------------------------------------------------------\n// |------------------------------------------------------\n// | Driver default\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n@import 'driver-default';\n","// |------------------------------------------------------\n// |------------------------------------------------------\n// | Version\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n$_g-version : \"3.0.1\";\n\n\n\n\n// |------------------------------------------------------\n// |------------------------------------------------------\n// | Variables\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n$_g-names-tokens : (\n\tcolumn\t\t\t\t\t\t\t\t: true, // will be the columns names\n\tcolumn-count \t\t\t\t\t\t: true, // will represent the column index (1,2,3,...)\n\talign \t\t\t\t\t\t\t\t: left center right top middle bottom around between,\n\tfloat \t\t\t\t\t\t\t\t: left right both,\n\tcount \t\t\t\t\t\t\t\t: true, // will represent a certain count\n\tside \t\t\t\t\t\t\t\t: top right bottom left null,\n\treverse \t\t\t\t\t\t\t: '' reverse,\n\tstate \t\t\t\t\t\t\t\t: true // is a valid pattern\n);\n$_g-names-separators : ('-','--','_','__','@');\t// all the allowed separators\n$_g-is-in-generate-phase : false; \t\t\t// keep track if we are in generate phase or not anymore\n$_g-inited : false;\t\t\t\t\t\t// keep track if gridle has been inited (silent classes, etc..) or not\n$_g-settings : (); \t\t\t\t\t\t// the default settings\n$_g-states : ();\t\t\t\t\t\t\t// the variable map for each states\n$_g-clear-classes : (); \t\t\t\t\t// store each automatic clear count\n$_g-columns : (); \t\t\t\t\t\t\t// store the registered special columns\n$_g-extend-base-classes : (); \t\t\t\t// save the rules that will extend the default gridle onces\n$_g-apply-css-for : (); \t\t\t\t\t// save the rules that will be applied for each states on a specified gridle mixin type\n\n$_g-current-state : ();\t\t\t\t\t// save the current state\n$_g-current-stateName : default; \t\t\t// save the current state name\n$_g-previous-state : (); \t\t\t\t\t// save the previous state\n$_g-previous-stateName : default; \t\t\t// save the previous state name\n\n$_g-content-arg-state : null; \t\t\t\t\t// this variable is used to pass state through global variable into an @content\n\n$g-scope : (); \t\t\t\t\t        // Variable scope used in mixin like `g-generate-custom-class`\n\n\n\n// |------------------------------------------------------\n// |------------------------------------------------------\n// | Vendors\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n@import 'flexbox';\n@import 'utils';\n\n\n\n\n// |------------------------------------------------------\n// |------------------------------------------------------\n// | Settings\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n@import 'settings';\n\n\n\n\n// |------------------------------------------------------\n// |------------------------------------------------------\n// | Functions\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n@import 'functions';\n\n\n\n\n// |------------------------------------------------------\n// |------------------------------------------------------\n// | Settings mixins\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n@import 'settings-mixins';\n\n\n\n\n// |------------------------------------------------------\n// |------------------------------------------------------\n// | Mixins\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n@import 'mixins';\n\n\n\n\n// |------------------------------------------------------\n// |------------------------------------------------------\n// | Api\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n@import 'api';\n\n\n\n\n// |------------------------------------------------------\n// |------------------------------------------------------\n// | Generate mixins\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n@import 'generate-mixins';\n","// Flexbox Mixins\n// http://philipwalton.github.io/solved-by-flexbox/\n// https://github.com/philipwalton/solved-by-flexbox\n//\n// Copyright (c) 2013 Brian Franco\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// This is a set of mixins for those who want to mess around with flexbox\n// using the native support of current browsers. For full support table\n// check: http://caniuse.com/flexbox\n//\n// Basically this will use:\n//\n// * Fallback, old syntax (IE10, mobile webkit browsers - no wrapping)\n// * Final standards syntax (FF, Safari, Chrome, IE11, Opera)\n//\n// This was inspired by:\n//\n// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/\n//\n// With help from:\n//\n// * http://w3.org/tr/css3-flexbox/\n// * http://the-echoplex.net/flexyboxes/\n// * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx\n// * http://css-tricks.com/using-flexbox/\n// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/\n// * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes\n\n//----------------------------------------------------------------------\n\n// Flexbox Containers\n//\n// The 'flex' value causes an element to generate a block-level flex\n// container box.\n//\n// The 'inline-flex' value causes an element to generate a inline-level\n// flex container box.\n//\n// display: flex | inline-flex\n//\n// http://w3.org/tr/css3-flexbox/#flex-containers\n//\n// (Placeholder selectors for each type, for those who rather @extend)\n\n@mixin flexbox {\n\tdisplay: -webkit-box;\n\tdisplay: -webkit-flex;\n\tdisplay: -moz-flex;\n\tdisplay: -ms-flexbox;\n\tdisplay: flex;\n}\n\n%flexbox { @include flexbox; }\n\n//----------------------------------\n\n@mixin inline-flex {\n\tdisplay: -webkit-inline-box;\n\tdisplay: -webkit-inline-flex;\n\tdisplay: -moz-inline-flex;\n\tdisplay: -ms-inline-flexbox;\n\tdisplay: inline-flex;\n}\n\n%inline-flex { @include inline-flex; }\n\n//----------------------------------------------------------------------\n\n// Flexbox Direction\n//\n// The 'flex-direction' property specifies how flex items are placed in\n// the flex container, by setting the direction of the flex container's\n// main axis. This determines the direction that flex items are laid out in.\n//\n// Values: row | row-reverse | column | column-reverse\n// Default: row\n//\n// http://w3.org/tr/css3-flexbox/#flex-direction-property\n\n@mixin flex-direction($value: row) {\n\t@if $value == row-reverse {\n\t\t-webkit-box-direction: reverse;\n\t\t-webkit-box-orient: horizontal;\n\t} @else if $value == column {\n\t\t-webkit-box-direction: normal;\n\t\t-webkit-box-orient: vertical;\n\t} @else if $value == column-reverse {\n\t\t-webkit-box-direction: reverse;\n\t\t-webkit-box-orient: vertical;\n\t} @else {\n\t\t-webkit-box-direction: normal;\n\t\t-webkit-box-orient: horizontal;\n\t}\n\t-webkit-flex-direction: $value;\n\t-moz-flex-direction: $value;\n\t-ms-flex-direction: $value;\n\tflex-direction: $value;\n}\n\t// Shorter version:\n\t@mixin flex-dir($args...) { @include flex-direction($args...); }\n\n//----------------------------------------------------------------------\n\n// Flexbox Wrap\n//\n// The 'flex-wrap' property controls whether the flex container is single-line\n// or multi-line, and the direction of the cross-axis, which determines\n// the direction new lines are stacked in.\n//\n// Values: nowrap | wrap | wrap-reverse\n// Default: nowrap\n//\n// http://w3.org/tr/css3-flexbox/#flex-wrap-property\n\n@mixin flex-wrap($value: nowrap) {\n\t// No Webkit Box fallback.\n\t-webkit-flex-wrap: $value;\n\t-moz-flex-wrap: $value;\n\t@if $value == nowrap {\n\t\t-ms-flex-wrap: none;\n\t} @else {\n\t\t-ms-flex-wrap: $value;\n\t}\n\tflex-wrap: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Flow (shorthand)\n//\n// The 'flex-flow' property is a shorthand for setting the 'flex-direction'\n// and 'flex-wrap' properties, which together define the flex container's\n// main and cross axes.\n//\n// Values: <flex-direction> | <flex-wrap>\n// Default: row nowrap\n//\n// http://w3.org/tr/css3-flexbox/#flex-flow-property\n\n@mixin flex-flow($values: (row nowrap)) {\n\t// No Webkit Box fallback.\n\t-webkit-flex-flow: $values;\n\t-moz-flex-flow: $values;\n\t-ms-flex-flow: $values;\n\tflex-flow: $values;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Order\n//\n// The 'order' property controls the order in which flex items appear within\n// their flex container, by assigning them to ordinal groups.\n//\n// Default: 0\n//\n// http://w3.org/tr/css3-flexbox/#order-property\n\n@mixin order($int: 0) {\n\t-webkit-box-ordinal-group: $int + 1;\n\t-webkit-order: $int;\n\t-moz-order: $int;\n\t-ms-flex-order: $int;\n\torder: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Grow\n//\n// The 'flex-grow' property sets the flex grow factor. Negative numbers\n// are invalid.\n//\n// Default: 0\n//\n// http://w3.org/tr/css3-flexbox/#flex-grow-property\n\n@mixin flex-grow($int: 0) {\n\t-webkit-box-flex: $int;\n\t-webkit-flex-grow: $int;\n\t-moz-flex-grow: $int;\n\t-ms-flex-positive: $int;\n\tflex-grow: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Shrink\n//\n// The 'flex-shrink' property sets the flex shrink factor. Negative numbers\n// are invalid.\n//\n// Default: 1\n//\n// http://w3.org/tr/css3-flexbox/#flex-shrink-property\n\n@mixin flex-shrink($int: 1) {\n\t-webkit-flex-shrink: $int;\n\t-moz-flex-shrink: $int;\n\t-ms-flex-negative: $int;\n\tflex-shrink: $int;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Basis\n//\n// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.\n//\n// Values: Like \"width\"\n// Default: auto\n//\n// http://www.w3.org/TR/css3-flexbox/#flex-basis-property\n\n@mixin flex-basis($value: auto) {\n\t-webkit-flex-basis: $value;\n\t-moz-flex-basis: $value;\n\t-ms-flex-preferred-size: $value;\n\tflex-basis: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox \"Flex\" (shorthand)\n//\n// The 'flex' property specifies the components of a flexible length: the\n// flex grow factor and flex shrink factor, and the flex basis. When an\n// element is a flex item, 'flex' is consulted instead of the main size\n// property to determine the main size of the element. If an element is\n// not a flex item, 'flex' has no effect.\n//\n// Values: none | <flex-grow> <flex-shrink> || <flex-basis>\n// Default: See individual properties (1 1 0).\n//\n// http://w3.org/tr/css3-flexbox/#flex-property\n\n@mixin flex($fg: 1, $fs: null, $fb: null) {\n\n\t// Set a variable to be used by box-flex properties\n\t$fg-boxflex: $fg;\n\n\t// Box-Flex only supports a flex-grow value so let's grab the\n\t// first item in the list and just return that.\n\t@if type-of($fg) == 'list' {\n\t\t$fg-boxflex: nth($fg, 1);\n\t}\n\n\t-webkit-box-flex: $fg-boxflex;\n\t-webkit-flex: $fg $fs $fb;\n\t-moz-box-flex: $fg-boxflex;\n\t-moz-flex: $fg $fs $fb;\n\t-ms-flex: $fg $fs $fb;\n\tflex: $fg $fs $fb;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Justify Content\n//\n// The 'justify-content' property aligns flex items along the main axis\n// of the current line of the flex container. This is done after any flexible\n// lengths and any auto margins have been resolved. Typically it helps distribute\n// extra free space leftover when either all the flex items on a line are\n// inflexible, or are flexible but have reached their maximum size. It also\n// exerts some control over the alignment of items when they overflow the line.\n//\n// Note: 'space-*' values not supported in older syntaxes.\n//\n// Values: flex-start | flex-end | center | space-between | space-around\n// Default: flex-start\n//\n// http://w3.org/tr/css3-flexbox/#justify-content-property\n\n@mixin justify-content($value: flex-start) {\n\t@if $value == flex-start {\n\t\t-webkit-box-pack: start;\n\t\t-ms-flex-pack: start;\n\t} @else if $value == flex-end {\n\t\t-webkit-box-pack: end;\n\t\t-ms-flex-pack: end;\n\t} @else if $value == space-between {\n\t\t-webkit-box-pack: justify;\n\t\t-ms-flex-pack: justify;\n\t} @else if $value == space-around {\n\t\t-ms-flex-pack: distribute;\n\t} @else {\n\t\t-webkit-box-pack: $value;\n\t\t-ms-flex-pack: $value;\n\t}\n\t-webkit-justify-content: $value;\n\t-moz-justify-content: $value;\n\tjustify-content: $value;\n}\n\t// Shorter version:\n\t@mixin flex-just($args...) { @include justify-content($args...); }\n\n//----------------------------------------------------------------------\n\n// Flexbox Align Items\n//\n// Flex items can be aligned in the cross axis of the current line of the\n// flex container, similar to 'justify-content' but in the perpendicular\n// direction. 'align-items' sets the default alignment for all of the flex\n// container's items, including anonymous flex items. 'align-self' allows\n// this default alignment to be overridden for individual flex items. (For\n// anonymous flex items, 'align-self' always matches the value of 'align-items'\n// on their associated flex container.)\n//\n// Values: flex-start | flex-end | center | baseline | stretch\n// Default: stretch\n//\n// http://w3.org/tr/css3-flexbox/#align-items-property\n\n@mixin align-items($value: stretch) {\n\t@if $value == flex-start {\n\t\t-webkit-box-align: start;\n\t\t-ms-flex-align: start;\n\t} @else if $value == flex-end {\n\t\t-webkit-box-align: end;\n\t\t-ms-flex-align: end;\n\t} @else {\n\t\t-webkit-box-align: $value;\n\t\t-ms-flex-align: $value;\n\t}\n\t-webkit-align-items: $value;\n\t-moz-align-items: $value;\n\talign-items: $value;\n}\n\n//----------------------------------\n\n// Flexbox Align Self\n//\n// Values: auto | flex-start | flex-end | center | baseline | stretch\n// Default: auto\n\n@mixin align-self($value: auto) {\n\t// No Webkit Box Fallback.\n\t-webkit-align-self: $value;\n\t-moz-align-self: $value;\n\t@if $value == flex-start {\n\t\t-ms-flex-item-align: start;\n\t} @else if $value == flex-end {\n\t\t-ms-flex-item-align: end;\n\t} @else {\n\t\t-ms-flex-item-align: $value;\n\t}\n\talign-self: $value;\n}\n\n//----------------------------------------------------------------------\n\n// Flexbox Align Content\n//\n// The 'align-content' property aligns a flex container's lines within the\n// flex container when there is extra space in the cross-axis, similar to\n// how 'justify-content' aligns individual items within the main-axis. Note,\n// this property has no effect when the flexbox has only a single line.\n//\n// Values: flex-start | flex-end | center | space-between | space-around | stretch\n// Default: stretch\n//\n// http://w3.org/tr/css3-flexbox/#align-content-property\n\n@mixin align-content($value: stretch) {\n\t// No Webkit Box Fallback.\n\t-webkit-align-content: $value;\n\t-moz-align-content: $value;\n\t@if $value == flex-start {\n\t\t-ms-flex-line-pack: start;\n\t} @else if $value == flex-end {\n\t\t-ms-flex-line-pack: end;\n\t} @else {\n\t\t-ms-flex-line-pack: $value;\n\t}\n\talign-content: $value;\n}\n","//\n// Str replace\n//\n// @param {string}  $string    String that you want to replace\n// @param {string}  $substr    String that is to be replaced by `$newsubstr`\n// @param {string}  $newsubstr String that replaces `$substr`\n// @param {number*} $all       Flag for replaceing all (1+) or not (0)\n// @return {string}\n//\n@function str-replace($string, $substr, $newsubstr, $all: 0) {\n\t$position-found: str-index($string, $substr);\n\t$processed: ();\n\n\t@while ($position-found and $position-found > 0) {\n\t\t$length-substr: str-length($substr);\n\t\t$processed: append($processed, str-slice($string, 0, $position-found - 1));\n\t\t$processed: append($processed, $newsubstr);\n\t\t$string: str-slice($string, $position-found + $length-substr);\n\n\t\t$position-found: 0;\n\n\t\t@if ($all > 0) {\n\t\t\t$position-found: str-index($string, $substr);\n\t\t}\n\t}\n\n\t$processed: append($processed, $string);\n\t$string: \"\";\n\n\t@each $s in $processed {\n\t\t$string: #{$string}#{$s};\n\t}\n\n\t@return $string;\n}\n\n//\n// Map set\n//\n// @param \tMap \t$map \t\tThe map to use\n// @param \tString \t$key \t\tThe key to update\n// @param \tMixed \t$value \t\tThe new value\n// @return \tMap \t\t\tThe new map\n//\n@function map-set($map, $key, $value) {\n\t$new: ($key: $value);\n\t@return map-merge($map, $new);\n}\n\n//\n// Remove item from list\n//\n@function remove-nth($list, $index) {\n  $result: null;\n\n  @if type-of($index) != number {\n\t@warn \"$index: #{quote($index)} is not a number for `remove-nth`.\";\n  }\n\n  @else if $index == 0 {\n\t@warn \"List index 0 must be a non-zero integer for `remove-nth`.\";\n  }\n\n  @else if abs($index) > length($list) {\n\t@warn \"List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.\";\n  }\n\n  @else {\n\t$result: ();\n\t$index: if($index < 0, length($list) + $index + 1, $index);\n\n\t@for $i from 1 through length($list) {\n\t  @if $i != $index {\n\t\t$result: append($result, nth($list, $i));\n\t  }\n\t}\n  }\n\n  @return $result;\n}\n\n//\n// List shift\n//\n// @param \tList \t$list \t\tThe list to use\n// @return \tList \t\t\t\tThe processed list\n//\n@function list-shift($list) {\n\t@return remove-nth($list,1);\n}\n\n//\n// List pop\n//\n// @param \tList \t$list \t\tThe list to use\n// @return \tList \t\t\t\tThe processed list\n//\n@function list-pop($list) {\n\t@return remove-nth($list,length($list));\n}\n\n//\n// In map\n// Determine if something is in the provided map\n//\n// @param \tMap \t$map \t\tThe map to use\n// @param \tMixed \t$needle\t\tWhat to search\n// @return \tBoolean\t\t\t\tTrue|false\n//\n@function in-map($map, $needle) {\n\t@each $v in $map {\n\t\t@if $v == $needle {\n\t\t\t@return true;\n\t\t}\n\t}\n\t@return false;\n}\n","// |------------------------------------------------------\n// |------------------------------------------------------\n// | Settings\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n$gridle-generate-json-settings \t\t\t: true !default;\n$gridle-default-states \t\t\t\t\t: false !default; // register or not the states tv, print, retina, etc...\n$_gridle-packages : (\n\tcontainer \t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('container','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default container\n\t),\n\trow \t\t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('row','-','%reverse','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default row\n\t),\n\trow-align \t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('row','-','align','-','%align','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default row-align\n\t),\n\trow-full \t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('row','-','full','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default row-full\n\t),\n\trow-debug\t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('row','-','debug','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: debug row-debug\n\t),\n\trow-no-gutter \t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('row','-','no','-','gutter','-','%side','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default row-no-gutter\n\t),\n\tnowrap \t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('nowrap','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default nowrap\n\t),\n\twrap \t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('wrap','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default wrap\n\t),\n\tcol \t\t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('col','-','%reverse','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default col\n\t),\n\tgrid \t\t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('gr','-','%column','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default grid\n\t),\n\tgrid-table \t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('gr','-','table','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default grid-table\n\t),\n\tgrid-adapt \t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('gr','-','adapt','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default grid-adapt\n\t),\n\tgrid-grow \t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('gr','-','grow','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default grid-grow\n\t),\n\tgrid-centered \t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('gr','-','centered','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default grid-centered\n\t),\n\tpush \t\t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('push','-','%column','@','%state'),\n\t\tpackage\t\t\t\t\t\t\t\t: default push\n\t),\n\tpull \t\t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('pull','-','%column','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default pull\n\t),\n\tprefix \t\t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('prefix','-','%column','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default prefix\n\t),\n\tsuffix \t\t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('suffix','-','%column','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: default suffix\n\t),\n\thide \t\t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('hide','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: helpers hide\n\t),\n\tshow \t\t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('show','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: helpers show\n\t),\n\tshow-inline \t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('show','-','inline','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: helpers show-inline\n\t),\n\tnot-visible \t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('not','-','visible','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: helpers not-visible\n\t),\n\tvisible \t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('visible','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: helpers visible\n\t),\n\tfloat \t\t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('float','-','%float','@','%state'),\n\t\tpackage\t\t\t\t\t\t\t\t: helpers float\n\t),\n\tclear \t\t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('clear','-','%float','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: helpers clear\n\t),\n\tclear-each \t\t\t\t\t\t\t: (\n\t\tclassname\t\t\t\t\t\t\t: ('clear','-','each','-','%count','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: helpers clear-each\n\t),\n\tgutter \t\t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('gutter','-','%side','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: helpers gutter\n\t),\n\tno-gutter \t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('no','-','gutter','-','%side','@','%state'),\n\t\tgeneric-selector \t\t\t\t\t: '[class*=\"no-gutter\"]',\n\t\tpackage \t\t\t\t\t\t\t: helpers no-gutter\n\t),\n\tauto-height \t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('auto','-','height','@','%state'),\n\t\tpackage\t\t\t\t\t\t\t\t: helpers auto-height\n\t),\n\torder \t\t\t\t\t\t\t\t: (\n\t\tclassname \t\t\t\t\t\t\t: ('order','-','%column-count','@','%state'),\n\t\tpackage \t\t\t\t\t\t\t: helpers order\n\t)\n);\n","// |------------------------------------------------------\n// |------------------------------------------------------\n// | Functions\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n/**\n * @name \tFunctions API\n * This are all the API functions that are exposed by gridle.\n */\n\n/**\n * Get states count\n * @return \t{Integer} \tThe number of states defined\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@function g-states-count() {\n\t@return length($_g-states);\n}\n\n\n/**\n * Get the current state map\n * @return \t\t{Map} \tThe current state map\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@function g-current-state() {\n\t@return $_g-current-state;\n}\n\n\n/**\n * Get the current state name\n * @return \t\t{String} \tThe current state name\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@function g-current-state-name() {\n\t@return $_g-current-stateName;\n}\n\n\n/**\n * Get the column width in percent for the global or a specific context\n *\n * @param \t{Integer} \t\t[$columns=1] \t\t\t\t\t\t\tThe number of columns to calculate\n * @param \t{Integer} \t\t[$stateMap-or-stateName=current] \t \tThe state to calculate the column width for\n * @return \t{Percent} \t\t\t\t\t\t\t\t\t\t\t\tThe width in percent\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@function g-column-width(\n\t$columns : 1,\n\t$stateMap-or-stateName : current\n) {\n\t$context : g-get-state-var(context, $stateMap-or-stateName);\n\t@return percentage(1 / $context * $columns);\n}\n\n\n/*\n * Get a state map\n *\n * @param \t{String|Map} \t\t[$state=current] \t\tThe name or map of the state to get\n * @return \t{Map} \t\t\t\tA state map object\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@function g-get-state(\n\t$stateMap-or-stateName : current\n) {\n\n\t// check if need to return the current state\n\t@if $stateMap-or-stateName == current {\n\t\t@return g-current-state();\n\t}\n\n\t// check if has a state named like this\n\t@if (type-of($stateMap-or-stateName) == string\n\t\tand  map-has-key($_g-states, unquote(\"#{$stateMap-or-stateName}\")))\n\t{\n\t\t@return map-get($_g-states, unquote(\"#{$stateMap-or-stateName}\"));\n\t}\n\n\t// check if it's a registered state as map passed\n\t@if type-of($stateMap-or-stateName) == map\n\t\tand map-get($stateMap-or-stateName, name) {\n\t\t$name : map-get($stateMap-or-stateName, name);\n\t\t@if g-has-state($name) {\n\t\t\t@return $stateMap-or-stateName;\n\t\t}\n\t}\n\n\t// a map is passed, so it's a state himself\n\t@if $stateMap-or-stateName\n\t\tand type-of($stateMap-or-stateName) == map\n\t{\n\t\t// prepare state\n\t\t$stateMap-or-stateName : _g-prepare-state-settings($stateMap-or-stateName);\n\t\t// create a new state by merging given one with default one\n\t\t$state : map-merge($_gridle-settings, $stateMap-or-stateName);\n\t\t// set the name with random name\n\t\t$state : map-set($state, name, unique-id());\n\t\t// return the custom state\n\t\t@return $state;\n\t}\n\n\t// return the default one if exist\n\t@if map-has-key($_g-states, default)\n\t{\n\t\t@return map-get($_g-states, default);\n\t}\n\n\t// nothing finded, return the default state\n\t@return $_gridle-settings;\n}\n@function g-state(\n\t$stateMap-or-stateName : current\n) {\n\t@return g-get-state($stateMap-or-stateName);\n}\n\n\n/**\n * Check if a state exist :\n * @param \t{String} \t\t$name \t\tThe name of the state to check\n * @return \t{Boolean} \t\t\t\t\ttrue if exist\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@function g-has-state(\n\t$stateName\n) {\n\t@if $stateName == current {\n\t\t@return true;\n\t}\n\t@if map-has-key($_g-states, unquote(\"#{$stateName}\")) {\n\t\t@return true;\n\t} @else {\n\t\t@return false;\n\t}\n}\n\n\n/**\n * Get a state variable\n *\n * @param \t{String} \t\t$varName \t\t\t\t\t\t\t\tThe variable name\n * @param  \t{String} \t\t[$stateMap-or-stateName=current] \t \tThe state name or a map state value\n * @return \t{Mixed} \t\t\t\t\t\t\t\t\t\t\t\tThe finded value\n */\n@function g-get-state-var(\n\t$varName,\n\t$stateMap-or-stateName : current\n) {\n\t// if is a state :\n\t$state : null;\n\n\t// get the state (if no state find, return the current one) :\n\t$state : g-get-state($stateMap-or-stateName);\n\n\t// check if has key\n\t@if map-has-key($state, unquote(\"#{$varName}\")) {\n\t\t@return map-get($state, unquote(\"#{$varName}\"));\n\t}\n\n\t// nothing finded :\n\t@return null;\n}\n@function g-state-var(\n\t$varName,\n\t$stateMap-or-stateName : current\n) {\n\t@return g-get-state-var($varName, $stateMap-or-stateName);\n}\n\n\n/**\n * Set a variable in a state\n * @param  \t\t{String} \t$var                    \tVariable name to assign\n * @param  \t\t{Mixed} \t$newValue          \t\t\tThe new value to assign\n * @param \t\t{String} \t[$state=current] \t\t\tThe state to apply the variable for\n * @return \t\t{List}                         \t\t\tThe states list (full)\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@function g-set-state-var(\n\t$var,\n\t$newValue,\n\t$stateName : current\n) {\n\t// get the state :\n\t$state : g-get-state($stateName);\n\n\t// check ig state and if has the variable :\n\t@if $state\n\t\t  and map-has-key($state,unquote(\"#{$var}\"))\n\t{\n\t\t// set new value in state :\n\t\t$state : map-set($state, unquote(\"#{$var}\"), $newValue);\n\n\t\t// set states :\n\t\t$_g-states : map-set($_g-states, unquote(\"#{$stateName}\"), $state);\n\n\t\t// return new state :\n\t\t@return $state;\n\t}\n\n\t// nothing getted :\n\t@return null;\n}\n\n\n/**\n * get the registered gridle states\n * @return \t{Map} \t\tAll the registered states\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@function g-states() {\n\t@return $_g-states;\n}\n@function g-get-states() {\n\t@return $_g-states;\n}\n\n\n\n/**\n * get the registered gridle states names\n * @return \t{List} \t\tAll the registered states names\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@function g-states-names() {\n\t@return g-get-states-names();\n}\n@function g-get-states-names() {\n\t$list : ();\n\t@each $stateName, $state in $_g-states {\n\t\t$list : append($list, $stateName);\n\t}\n\t@return $list;\n}\n\n\n\n//\n// Get the apply css for map for a certain class and state\n//\n@function _g-get-apply-css-for-map(\n\t$for,\n\t$stateName : default\n) {\n\t// check if has some extend for this state\n\t$map : map-get($_g-apply-css-for, $stateName);\n\t@if $map == null { @return null; }\n\n\t// check if has some extend for the requested for\n\t$extend : map-get($map, $for);\n\n\t// return the resulting extend map\n\t@return $extend;\n}\n\n\n//\n// Get the extend map for a certain class and state\n//\n@function _g-get-extend-class-map(\n\t$for,\n\t$stateName : default\n) {\n\t// check if has some extend for this state\n\t$map : map-get($_g-extend-base-classes, $stateName);\n\t@if $map == null { @return null; }\n\n\t// check if has some extend for the requested for\n\t$extend : map-get($map, $for);\n\n\t// return the resulting extend map\n\t@return $extend;\n}\n\n\n//\n// Generate a column\n//\n// @param \tString \t\t$name \t\t\t\tThe column name (often count)\n// @param \tint \t\t$columns \t\t\tThe column count that the column will take\n// @param \tint \t\t$context \t\t\tThe context on which the width will be calculed\n// @param \tBoolean \t$generateClasses \tSet if the column has to be generated in css\n//\n@function _g-create-column(\n\t$name,\n\t$columns,\n\t$context,\n\t$name-multiplicator : 1 // used to extend the state on custom registered columns\n) {\n\t@return (\n\t\tname : $name,\n\t\tcolumns : $columns,\n\t\tcontext : $context,\n\t\tname-multiplicator : $name-multiplicator\n\t);\n}\n\n\n/**\n * Get the register columns map\n * @param \t{String|List<String>} \t\t[$state=current] \t\tThe state name or map\n * @return \t{Map} \t\t\t\t\t\t\t\t\t\t\t\tThe map of registered columns for the specified state\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@function g-get-columns(\n\t$state : current\n) {\n\t// get variables\n\t$context : g-get-state-var(context, $state);\n\t$name-multiplicator : g-get-state-var(name-multiplicator, $state);\n\n\t// get specials columns\n\t$columnsMap : map-merge((), $_g-columns);\n\n\t// loop through context\n\t@for $i from 0 through $context {\n\n\t\t// name\n\t\t$columnName : \"#{$i*$name-multiplicator}\";\n\t\t$columnWidth : $i * $name-multiplicator;\n\n\t\t// // create a column\n\t\t$col : _g-create-column($columnName, $columnWidth, $context, $name-multiplicator);\n\n\t\t// // add column in columns map\n\t\t$columnsMap : map-set($columnsMap, $columnName,  $col);\n\t}\n\n\t// return columns\n\t@return $columnsMap;\n}\n\n\n//\n// Check if has column\n//\n@function _g-has-column(\n\t$name\n) {\n\t$column : map-get($_g-columns,$name);\n\t@if $column {\n\t\t@return true;\n\t} @else {\n\t\t@return false;\n\t}\n}\n\n\n@function _g-prepare-state-settings(\n\t$settings\n) {\n\t// manage gutters\n\t$gutter-top : map-get($settings, gutter-top);\n\t$gutter-bottom : map-get($settings, gutter-bottom);\n\t$gutter-left : map-get($settings, gutter-left);\n\t$gutter-right : map-get($settings, gutter-right);\n\t$gutter-width : map-get($settings, gutter-width);\n\t$gutter-height : map-get($settings, gutter-height);\n\t@if $gutter-right and $gutter-left {\n\t\t// calculate the gutter-width\n\t\t$settings : map-set($settings, gutter-width, $gutter-left + $gutter-right);\n\t} @else if $gutter-width {\n\t\t// calculate the gutter-left and right\n\t\t$settings : map-set($settings, gutter-left, $gutter-width * .5);\n\t\t$settings : map-set($settings, gutter-right, $gutter-width * .5);\n\t}\n\t@if $gutter-top and $gutter-bottom {\n\t\t// calculate the gutter-height\n\t\t$settings : map-set($settings, gutter-height, $gutter-bottom + $gutter-top);\n\t} @else if $gutter-height {\n\t\t// calculate the gutter-bottom and top\n\t\t$settings : map-set($settings, gutter-bottom, $gutter-height * .5);\n\t\t$settings : map-set($settings, gutter-top, $gutter-height * .5);\n\t}\n\n\t// return prepared settings\n\t@return $settings;\n}\n\n\n//\n// Extend a state\n//\n@function _g-inherit-state(\n\t$state,\n\t$extend-state\n) {\n\t$extend-state-name : g-get-state-var(name, $extend-state);\n\t$state-name : g-get-state-var(name, $state);\n\t$has-state : g-has-state($state-name);\n\t$has-extend-state : g-has-state($extend-state-name);\n\t@if $has-state and $has-extend-state {\n\t\t// we do nothing if this is nested existing states\n\t\t@return $state;\n\t} @else if $has-extend-state {\n\t\t// if the base state is a registered one\n\t\t// keep the extend state and extend it with the wanted state\n\t\t@return map-merge($extend-state, $state);\n\t} @else {\n\t\t// otherwise, the base state is a custom one so we keep\n\t\t// it and extend the wanted state with it\n\t\t$new-state : map-remove($extend-state, name); // remove the name is important here!\n\t\t@return map-merge($state, $new-state);\n\t}\n}\n\n\n//\n// Get the padding value\n//\n@function _g-forge-gutters-map(\n\t$side-or-size,\n\t$state : current\n) {\n\t$map : ();\n\t// if the parameter is \"all\", mean that we want all the gutters\n\t@if $side-or-size == all {\n\t\t@each $side in (top right bottom left) {\n\t\t\t$map : map-set($map, $side, g-get-state-var(\"gutter-#{$side}\", $state));\n\t\t}\n\t} @else if type-of($side-or-size) == map {\n\t\t@each $side in (top right bottom left) {\n\t\t\t@if map-get($side-or-size, $side) {\n\t\t\t\t$map : map-set($map, $side, map-get($side-or-size, $side));\n\t\t\t} @else {\n\t\t\t\t$map : map-set($map, $side, 0);\n\t\t\t}\n\t\t}\n\t} @else if type-of($side-or-size) == number {\n\t\t$map : (\n\t\t\ttop : 0,\n\t\t\tright : $side-or-size * .5,\n\t\t\tbottom : 0,\n\t\t\tleft : $side-or-size * .5\n\t\t);\n\t} @else if type-of($side-or-size) == list or type-of($side-or-size) == string {\n\n\t\t// check if is a full number list\n\t\t$list-number : true;\n\t\t@each $s in $side-or-size {\n\t\t\t@if type-of($s) != number {\n\t\t\t\t$list-number : false;\n\t\t\t}\n\t\t}\n\n\t\t@if $list-number {\n\n\t\t\t@if length($side-or-size) == 2 {\n\t\t\t\t$val1 : nth($side-or-size,1) * .5;\n\t\t\t\t$val2 : nth($side-or-size,2) * .5;\n\t\t\t\t$map : (\n\t\t\t\t\ttop : $val1,\n\t\t\t\t\tright : $val2,\n\t\t\t\t\tbottom : $val1,\n\t\t\t\t\tleft : $val2\n\t\t\t\t)\n\t\t\t} @else if length($side-or-size) == 4 {\n\t\t\t\t$map : (\n\t\t\t\t\ttop : nth($side-or-size,1),\n\t\t\t\t\tright : nth($side-or-size,2),\n\t\t\t\t\tbottom : nth($side-or-size,3),\n\t\t\t\t\tleft : nth($side-or-size,4)\n\t\t\t\t)\n\t\t\t}\n\n\t\t} @else {\n\t\t\t// forge the map with registered values\n\t\t\t@each $side in (top right bottom left) {\n\t\t\t\t@if index($side-or-size, $side) {\n\t\t\t\t\t$map : map-set($map, $side, g-get-state-var(\"gutter-#{$side}\", $state));\n\t\t\t\t} @else {\n\t\t\t\t\t$map : map-set($map, $side, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// @debug(\"get gutters from registered #{inspect($map)}\");\n\t\t}\n\t} @else {\n\t\t// unable to generate a gutter map\n\t\t@return false;\n\t}\n\n\t// return the padding map\n\t@return $map;\n}\n\n\n/**\n * Will return the generated selector depending on the \"package\" wanted, the state and some optional values that might be needed by the package (like for row-align that need a \"side\" value)\n * @param \t\t{String} \t\t\t\t\t\t\t$package \t\t\tThe package to generate the selector for (see _settings.scss file)\n * @param \t\t{String|List<String} \t\t\t\t[$states=null] \t\tThe list of state to generate the selector for. If not specified, will generate for all registered states\n * @param \t\t{Mixed} \t\t\t\t\t\t\t[$value=null] \t\tThe value that will be used to replace the \"%{tokenName}\" inside the package pattern\n * @example \tscss\n * #{g-selector(grid, mobile, 2)} {\n * \t// your code here\n * \t// The selector will be .gr-2@mobile\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@function g-selector(\n\t$package,\n\t$states : null,\n\t$value : null\n) {\n\t$sel : ();\n\n\t@if length($package) > 1 {\n\t\t@each $f in $package {\n\t\t\t$sel : append($sel, g-selector($f, $states, $value), comma);\n\t\t}\n\t} @else {\n\t\t// get all states if not specified\n\t\t@if $states == null {\n\t\t\t$states : g-get-states-names();\n\t\t}\n\n\t\t// get the pattern\n\t\t$pattern : map-get($_gridle-packages, $package);\n\t\t$pattern : map-get($pattern, classname);\n\n\t\t@each $stateName in $states {\n\t\t\t@if $value != null {\n\t\t\t\t$sel : append($sel, _g-selector($package, $stateName, $value), comma);\n\t\t\t} @else if index($pattern, '%column') {\n\t\t\t\t@each $columnName, $column in _g-get-pattern-values(column) {\n\t\t\t\t\t$sel : append($sel, _g-selector($package, $stateName, $columnName), comma);\n\t\t\t\t}\n\t\t\t} @else if index($pattern, '%column-count') {\n\t\t\t\t@for $i from 0 through _g-get-pattern-values(column-count) {\n\t\t\t\t\t$sel : append($sel, _g-selector($package, $stateName, $i), comma);\n\t\t\t\t}\n\t\t\t\t@if $package == flex-order {\n\t\t\t\t\t$sel : append($sel, _g-selector($package, $stateName, first), comma);\n\t\t\t\t\t$sel : append($sel, _g-selector($package, $stateName, last), comma);\n\t\t\t\t}\n\t\t\t} @else if index($pattern, '%align') {\n\t\t\t\t@each $a in _g-get-pattern-values(align) {\n\t\t\t\t\t$sel : append($sel, _g-selector($package, $stateName, $a), comma);\n\t\t\t\t}\n\t\t\t} @else if index($pattern, '%count') and $package == clear-each {\n\t\t\t\t@each $idx, $clearEach in _g-get-pattern-values(count) {\n\t\t\t\t\t$count : map-get($clearEach, clearEach);\n\t\t\t\t\t$sel : append($sel, _g-selector($package, $stateName, $count), comma);\n\t\t\t\t}\n\t\t\t} @else if index($pattern, '%side') {\n\t\t\t\t@each $side in _g-get-pattern-values(side) {\n\t\t\t\t\t$sel : append($sel, _g-selector($package, $stateName, $side), comma);\n\t\t\t\t}\n\t\t\t} @else if index($pattern, '%float') {\n\t\t\t\t@each $float in _g-get-pattern-values(float) {\n\t\t\t\t\t$sel : append($sel, _g-selector($package, $stateName, $float), comma);\n\t\t\t\t}\n\t\t\t} @else if index($pattern, '%reverse') {\n\t\t\t\t@each $reverse in _g-get-pattern-values(reverse) {\n\t\t\t\t\t$sel : append($sel, _g-selector($package, $stateName, $reverse), comma);\n\t\t\t\t}\n\t\t\t} @else {\n\t\t\t\t$sel : append($sel, _g-selector($package, $stateName), comma);\n\t\t\t}\n\t\t}\n\t}\n\t@return $sel;\n}\n\n\n//\n// Generate classname\n//\n@function _g-classname(\n\t$package,\n\t$state : null,\n\t$value : null\n) {\n\t// get the pattern\n\t$pattern : $package;\n\t@if type-of($package) == string {\n\t\t$pattern : map-get($_gridle-packages, $package);\n\t\t$pattern : map-get($pattern, classname);\n\t}\n\n\t// delete default :\n\t@if unquote(\"#{$state}\") == default {\n\t\t$state : null;\n\t}\n\n\t// construct class name :\n\t$removeSeparator : false;\n\t@for $i from length($pattern) through 1 {\n\t\t$pa : nth($pattern, $i);\n\n\t\t@if $pa == '@' {\n\t\t\t$pattern : set-nth($pattern, $i, '\\\\@');\n\t\t}\n\n\t\t@if index($_g-names-separators, $pa) {\n\t\t\t// check if need to remove separator\n\t\t\t@if $removeSeparator {\n\t\t\t\t$pattern : set-nth($pattern, $i, null);\n\t\t\t}\n\t\t\t$removeSeparator : false;\n\t\t} @else if $pa == \"%state\" {\n\t\t\t@if $state == null {\n\t\t\t\t$pattern : set-nth($pattern, $i, null);\n\t\t\t\t$removeSeparator : true;\n\t\t\t} @else {\n\t\t\t\t$pattern : set-nth($pattern, $i, $state);\n\t\t\t}\n\t\t} @else if $pa and str-index($pa, '%') == 1 {\n\t\t\t$token : str-slice($pa, 2);\n\t\t\t// check that the value is part of the token\n\t\t\t$tokens : map-get($_g-names-tokens, $token);\n\t\t\t@if $tokens {\n\t\t\t\t$pattern : set-nth($pattern, $i, $value);\n\t\t\t\t@if $value == null {\n\t\t\t\t\t$removeSeparator : true;\n\t\t\t\t}\n\t\t\t}\n\t\t} @else if $pa == null {\n\t\t\t$removeSeparator : true;\n\t\t}\n\n\t}\n\n\t// clean selector\n\t$list: ();\n\t@each $pa in $pattern {\n\t\t@if $pa {\n\t\t\t$list: append($list, $pa);\n\t\t}\n\t}\n\t$pattern : $list;\n\n\t// build selector\n\t$sel : \"\";\n\t$prefix : g-get-state-var(classes-prefix, $state);\n\t@each $part in $pattern {\n\t\t@if $part {\n\t\t\t$sel : \"#{$sel}#{$part}\";\n\t\t}\n\t}\n\t@if $prefix and str-slice($sel,1,str_length($prefix)) != $prefix {\n\t\t$sel : \"#{$prefix}#{$sel}\";\n\t}\n\n\t// return generated class :\n\t@return unquote($sel);\n}\n\n@function _g-selector(\n\t$package,\n\t$state : null,\n\t$value : null\n) {\n\t$classname : _g-classname($package, $state, $value);\n\t@return unquote(\".#{$classname}\");\n}\n\n\n//\n// Unmatched patterns\n//\n// @param \tList \t\t$pattern \tThe pattern to use to generate classname\n// @return  Map                     Map of unmatched pattern index:pattern\n//\n@function _g-unmatched-patterns(\n\t$pattern\n) {\n\t$unmatched : ();\n\n\t// Loop each partern\n\t@for $i from length($pattern) through 1 {\n\t\t$var : nth($pattern, $i);\n\t\t@if $var and str-index($var, '%') == 1 {\n\t\t\t$token : str-slice($var, 2);\n\t\t\t// check that the value is part of the token\n\t\t\t$tokens : map-get($_g-names-tokens, $token);\n\t\t\t@if $tokens == null {\n\t\t\t\t$unmatched : map-set($unmatched, $i, $var);\n\t\t\t}\n\t\t}\n\t}\n\n\t@return $unmatched;\n}\n\n\n//\n// matched patterns\n//\n// @param \tList \t\t$pattern \tThe pattern to use to generate classname\n// @return  Map                     Map of matched pattern index:pattern\n//\n@function _g-matched-patterns(\n\t$pattern\n) {\n\t$matched : ();\n\n\t// Loop each partern\n\t@for $i from length($pattern) through 1 {\n\t\t$var : nth($pattern, $i);\n\t\t@if $var and str-index($var, '%') == 1 {\n\t\t\t$token : str-slice($var, 2);\n\t\t\t// check that the value is part of the token\n\t\t\t$tokens : map-get($_g-names-tokens, $token);\n\t\t\t@if $tokens != null {\n\t\t\t\t$matched : map-set($matched, $i, $var);\n\t\t\t}\n\t\t}\n\t}\n\n\t@return $matched;\n}\n\n\n//\n// Get dynamic pattern values\n//\n// @param \tString \t\t$package \t\t\tName of the token\n// @return \tMixed \t\t\t\t\t   \t Values of the token\n//\n@function _g-get-pattern-values(\n\t$package\n){\n\t@if $package == column {\n\t\t@return g-get-columns();\n\t}\n\n\t@if $package == column-count {\n\t\t@return length(g-get-columns());\n\t}\n\n\t@if $package == count {\n\t\t@return $_g-clear-classes;\n\t}\n\n\t@return map-get($_g-names-tokens, $package);\n}\n\n/**\n * Return the current used driver\n * @return \t{String} \t\tThe used driver like default or driver\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@function g-driver() {\n\t@return $_gridle-driver;\n}\n\n/**\n * Check if the used driver is the specified one\n * @param \t\t{String} \t\t$driver \tThe driver to check\n * @return \t\t{Boolean} \t\t\t\t\tTrue if is the current driver\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@function g-is-driver($driver) {\n\t@each $d in $driver {\n\t\t@if $d == g-driver() {\n\t\t\t@return true;\n\t\t}\n\t}\n\t@return false;\n}\n\n\n//\n// Check if we need to generate the class or not\n//\n// @param \tList \t\t$for \t\t\tName of the class map\n// @param \tList \t\t$what \t\t\tThe map that set which class map to include and exclude\n// @return \tBoolean \t\t\t\t\ttrue if need to generate, false if not\n//\n@function _g-need-to-generate(\n\t$package,\n\t$what\n) {\n\t// check that the wanted package exist in system\n\t@if map-get($_gridle-packages, $package) {\n\t\t$package : map-get($_gridle-packages, $package);\n\t\t$package : map-get($package, package);\n\t} @else {\n\t\t@return false;\n\t}\n\n\t// if we have a what param, need to check if the package is needed\n\t@if $what and $what != all {\n\n\t\t// check if we have only some - in the states list\n\t\t// mean that we want to only remove these specified states\n\t\t// from the all states list\n\t\t$onlyRemove : true;\n\t\t@each $w in $what {\n\t\t\t@if str-slice($w,1,1) != '-' {\n\t\t\t\t$onlyRemove : false;\n\t\t\t}\n\t\t}\n\n\t\t@if $onlyRemove {\n\t\t\t@each $name in $package {\n\t\t\t\t@if index($what, unquote(\"-#{$name}\")) {\n\t\t\t\t\t@return false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t@return true;\n\t\t} @else {\n\t\t\t@each $name in $package {\n\t\t\t\t@if index($what, unquote(\"#{$name}\")) {\n\t\t\t\t\t@return true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t@return false;\n\t\t}\n\t}\n\t// we don't have a what param so the package is\n\t@return true;\n}\n\n\n//\n// Get generic selector for a class\n//\n@function _g-get-generic-selector(\n\t$package\n) {\n\t$p : map-get($_gridle-packages, $package);\n\t$sel : map-get($p, generic-selector);\n\t@if $sel {\n\t\t@return unquote($sel);\n\t}\n\t$sel : map-get($p, classname);\n\t$generic : \"\";\n\t$end : false;\n\t$i : 1;\n\t@each $part in $sel {\n\t\t@if not $end {\n\t\t\t// if we have a separator, check the next value to see if it's a variable\n\t\t\t@if index($_g-names-separators, $part) and $i < length($sel) {\n\t\t\t\t@if nth($sel,$i + 1) != '%state' {\n\t\t\t\t\t$generic : #{$generic}#{$part};\n\t\t\t\t} @else {\n\t\t\t\t\t$end : true;\n\t\t\t\t}\n\t\t\t} @else {\n\t\t\t\t@if str-slice($part,1,1) != '%' {\n\t\t\t\t\t$generic : #{$generic}#{$part};\n\t\t\t\t} @else {\n\t\t\t\t\t$end : true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$i : $i + 1;\n\t}\n\t@return unquote('[class*=\"#{$generic}\"]');\n}\n\n\n//\n// Check if gridle is in generation phase\n//\n@function _g-is-in-generate-phase() {\n\t@return $_g-is-in-generate-phase;\n}\n\n\n//\n// Parse gridle mixin list\n//\n@function _g-parse-gridle-mixin-list(\n\t$list\n) {\n\t// map\n\t$map : ();\n\n\t// context\n\t$context : null;\n\t$of : index($list, of);\n\t@if $of {\n\t\t$context : nth($list, ($of + 1));\n\t\t$list : remove-nth($list,$of);\n\t\t$list : remove-nth($list,$of);\n\t} @else {\n\t\t$ctx : index($list, context);\n\t\t@if $ctx {\n\t\t\t$context : nth($list, ($ctx + 1));\n\t\t\t$list : remove-nth($list,$ctx);\n\t\t\t$list : remove-nth($list,$ctx);\n\t\t}\n\t}\n\n\t// grid\n\t$gr : nth($list, 1);\n\t@if type-of($gr) == number or $gr == adapt or $gr == grow or _g-has-column($gr) {\n\t\t$map : map-set($map, grid, $gr $context);\n\t\t$list : remove-nth($list,1);\n\t}\n\n\t// prefix\n\t$prefix : null;\n\t$at : index($list, at);\n\t@if $at {\n\t\t$map : map-set($map, prefix, nth($list,($at + 1)) $context);\n\t\t$list : remove-nth($list,$at);\n\t\t$list : remove-nth($list,$at);\n\t}\n\n\t// loop on each parameters\n\t$prop_values : ();\n\t$prop_name : null;\n\t$list : append($list, _gridle-last);\n\t@each $param in $list {\n\n\t\t@if $param != with and $param != 'and' {\n\t\t\t@if map-get($_gridle-packages, $param) or $param == _gridle-last {\n\t\t\t\t@if $prop_name {\n\t\t\t\t\t$values : true;\n\t\t\t\t\t@if length($prop_values) > 0 {\n\t\t\t\t\t\t$values : $prop_values;\n\t\t\t\t\t\t@if length($prop_values) == 1 {\n\t\t\t\t\t\t\t$values : nth($prop_values,1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$prop_values : ();\n\t\t\t\t\t}\n\t\t\t\t\t$map : map-set($map, $prop_name, $values);\n\t\t\t\t}\n\t\t\t\t$prop_name : $param;\n\t\t\t} @else {\n\t\t\t\t$prop_values : append($prop_values, $param);\n\t\t\t}\n\t\t}\n\t}\n\n\t// // check if we don't have any gutter parameters\n\t// @if not map-get($map, gutter) and not map-get($map, no-gutter) {\n\t// \t$map : map-set($map, gutter, true);\n\t// }\n\n\t// return the map\n\t@return $map;\n}\n\n\n//\n// Get set map from string\n//\n@function _g-get-gridle-set-map-from-list(\n\t$list\n) {\n\t// loop on each list element to split into states lists\n\t$state : current;\n\t$map : ();\n\t@each $prop in $list {\n\t\t@if map-get($map, $state) == null {\n\t\t\t$map : map-set($map, $state, ());\n\t\t}\n\t\t@if type-of($prop) == string and g-has-state($prop) {\n\t\t\t$state : $prop;\n\t\t} @else {\n\t\t\t$ls : map-get($map, $state);\n\t\t\t$ls : append($ls, $prop);\n\t\t\t$map : map-set($map, $state, $ls);\n\t\t}\n\t}\n\n\t// loop on each states\n\t@each $stateName, $props in $map {\n\t\t@if length($props) > 0 {\n\t\t\t$props_map : _g-parse-gridle-mixin-list($props);\n\t\t\t@if type-of($props_map) == map {\n\t\t\t\t$map : map-set($map, $stateName, $props_map);\n\t\t\t} @else {\n\t\t\t\t$map : map-set($map, $stateName, null);\n\t\t\t}\n\t\t}\n\t}\n\n\t@return $map;\n}\n\n\n/**\n * Get the media query for a particular state, or width, etc...\n *\n * @param \t{Mixed} \t\t[$stateName-or-stateMap=current] \t\tThe state name of the min width\n * @return \t{String} \t\t\t\t\t\t\t\t\t\t\t\tThe media query string without the @media\n */\n@function g-get-media-query(\n\t$stateName-or-stateMap : current\n) {\n\t// check if is a string :\n\t$state : null;\n\t@if type-of($stateName-or-stateMap) == string\n\t{\n\t\t$state : g-get-state($stateName-or-stateMap);\n\t}\n\t@else if $stateName-or-stateMap == null\n\t{\n\t\t$state : $_gridle-settings;\n\t}\n\t@else\n\t{\n\t\t$state : map-merge($_gridle-settings, $stateName-or-stateMap);\n\t}\n\n\t// if it's some settings or a state :\n\t@if $state {\n\n\t\t// get vars :\n\t\t$name : map-get($state, name);\n\t\t$min-width : map-get($state, min-width);\n\t\t$max-width : map-get($state, max-width);\n\t\t$query : map-get($state, query);\n\n\t\t// direct query :\n\t\t@if $query\n\t\t{\n\t\t\t@return $query;\n\t\t}\n\t\t@else if $min-width and $max-width\n\t\t{\n\t\t\t@return \"screen and (min-width: #{$min-width}) and (max-width: #{$max-width})\";\n\t\t}\n\t\t@else if $min-width\n\t\t{\n\t\t\t@return \"screen and (min-width: #{$min-width})\";\n\t\t}\n\t\t@else if $max-width\n\t\t{\n\t\t\t@return \"screen and (max-width: #{$max-width})\";\n\t\t}\n\t\t@else\n\t\t{\n\t\t\t@return null;\n\t\t}\n\n\t}\n\t@else\n\t{\n\t\t@return null;\n\t}\n}\n","// |------------------------------------------------------\n// |------------------------------------------------------\n// | Settings mixins\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n/**\n * @name \tSetting mixins\n * This are all the mixins that are exposed by gridle for the setting up your grid.\n */\n\n/**\n * Setting up your grid\n * @param \t\t{Map} \t\t$settings \t\tYour default grid settings\n * @example \tscss\n * // default settings\n * $_gridle-settings : (\n *\tname : default,\n *\tmin-width : null,\n *\tmax-width : null,\n *\tquery : null,\n *\tclasses : true,\n *\tcontext : 12,\n *\tcolumn-width : null,\n *\tgutter-width : 20px,\n *\tgutter-height : 0,\n *\tgutter-top : 0,\n *\tgutter-right : 10px,\n *\tgutter-bottom : 0,\n *\tgutter-left : 10px,\n *\tdirection : ltr,\n *\tdir-attribute : false,\n *\tname-multiplicator : 1,\n *\tstates-classes : false,\n *\tclasses-prefix : null\n * );\n *\n * // setting up your grid\n * \\@include g-setup((\n * \tcontext : 12\n * \t// other settings\n * ));\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-setup(\n\t$settings : ()\n) {\n\t// prepare state\n\t$settings : _g-prepare-state-settings($settings);\n\n\t// extend default settings\n\t$_gridle-settings : map-merge((\n\t\tname : default,\n\t\tmin-width : null,\n\t\tmax-width : null,\n\t\tquery : null,\n\t\tclasses : true,\n\t\tcontext : 12,\n\t\tcolumn-width : null,\n\t\tgutter-width : 20px,\n\t\tgutter-height : 0,\n\t\tgutter-top : 0,\n\t\tgutter-right : 10px,\n\t\tgutter-bottom : 0,\n\t\tgutter-left : 10px,\n\t\tdirection : ltr,\n\t\tdir-attribute : false,\n\t\tname-multiplicator : 1,\n\t\tstates-classes : false,\n\t\tclasses-prefix : null\n\t), $settings) !global;\n\n\t// register default state :\n\t@include g-register-state(default, $_gridle-settings);\n\n\t// set current state to default\n\t$_g-current-state : $_gridle-settings !global;\n\t$_g-current-stateName : default !global;\n}\n\n/**\n * Register a new state with some settings\n * @param \t\t{String} \t\t$name \t\tThe new state name\n * @param \t\t{Map} \t\t\t$settings \tThe state settings\n * @example \tscss\n * \\@include g-register-state(mobile, (\n * \tmax-width : 600px\n * ));\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-register-state(\n\t$name,\n\t$settings : ()\n) {\n\t// prepare state\n\t$settings : _g-prepare-state-settings($settings);\n\n\t// settings :\n\t$settings : map-merge($_gridle-settings, $settings);\n\n\t// set name :\n\t$settings : map-set($settings, name, $name);\n\n\t// gutter sizes :\n\t$gutter-top : map-get($settings, gutter-top);\n\t$gutter-right : map-get($settings, gutter-right);\n\t$gutter-bottom : map-get($settings, gutter-bottom);\n\t$gutter-left : map-get($settings, gutter-left);\n\n\t// add state in maps :\n\t$_g-states : map-set($_g-states, $name, $settings) !global;\n\n\t// add rules if gutter is different\n\t@if $gutter-top != map-get($_gridle-settings, gutter-top)\n\t\tor $gutter-right != map-get($_gridle-settings, gutter-right)\n\t\tor $gutter-bottom != map-get($_gridle-settings, gutter-bottom)\n\t\tor $gutter-left != map-get($_gridle-settings, gutter-left) {\n\t\t$gutters : _g-forge-gutters-map(top right bottom left, $name);\n\t\t@include g-apply-css-for(grid grid-grow grid-adapt, (\n\t\t\tg-gutter : right left\n\t\t), $name);\n\t}\n\n\t// add rules if direction is different\n\t$direction : map-get($settings, direction);\n\t@if $direction != map-get($_gridle-settings, direction) {\n\t\t$float : left;\n\t\t@if $direction == rtl {\n\t\t\t$float : right;\n\t\t}\n\t\t@include g-apply-css-for(grid, (\n\t\t\tdirection : $direction,\n\t\t\tfloat : $float\n\t\t), $name);\n\t}\n\n\t/**\n\t * @name \t#{g-get-state-var(name, $name)} State\n\t * Here's the settings for the **#{g-get-state-var(name, $name)}** state.\n\t * @styleguide \tGridle / States\n\t * @display \tgridle-settings\n\t * @gridle-name \t#{g-get-state-var(name, $name)}\n\t * @gridle-min-width \t#{g-get-state-var(min-width, $name)}\n\t * @gridle-max-width \t#{g-get-state-var(max-width, $name)}\n\t * @gridle-query \t#{g-get-state-var(query, $name)}\n\t * @gridle-classes \t#{g-get-state-var(classes, $name)}\n\t * @gridle-context \t#{g-get-state-var(context, $name)}\n\t * @gridle-gutter-width \t#{g-get-state-var(gutter-width, $name)}\n\t * @gridle-gutter-height \t#{g-get-state-var(gutter-height, $name)}\n\t * @gridle-gutter-top \t#{g-get-state-var(gutter-top, $name)}\n\t * @gridle-gutter-right \t#{g-get-state-var(gutter-right, $name)}\n\t * @gridle-gutter-bottom \t#{g-get-state-var(gutter-bottom, $name)}\n\t * @gridle-gutter-left \t#{g-get-state-var(gutter-left, $name)}\n\t * @gridle-direction \t#{g-get-state-var(direction, $name)}\n\t * @gridle-dir-attribute \t#{g-get-state-var(dir-attribute, $name)}\n\t * @gridle-name-multiplicator \t#{g-get-state-var(name-multiplicator, $name)}\n\t * @gridle-states-classes \t#{g-get-state-var(states-classes, $name)}\n\t * @gridle-classes-prefix \t#{g-get-state-var(classes-prefix, $name)}\n\t */\n}\n\n\n/**\n * Register some clear each that will been generated in classes\n * @param \t\t{Integer} \t\t$count \t\tThe n each item to clear\n * @param \t\t{String} \t\t$what \t\tWhat to clear (left, right, both)\n * @example \tscss\n * \\@include g-register-clear-each(2, left);\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-register-clear-each(\n\t$count,\n\t$clearWhat\n) {\n\t// create the clear map :\n\t$classMap : (\n\t\tclearEach : $count,\n\t\tclearWhat : $clearWhat\n\t);\n\n\t// append to map :\n\t$_g-clear-classes : map-set($_g-clear-classes, $count, $classMap) !global;\n}\n\n\n/**\n * Register a new custom column in case the generated ones are not enough.\n * This is useful when you have a 12 columns grid and you need some 1/5 ones.\n * @param \t\t{String} \t\t$name \t\tThe column name\n * @param \t\t{Integer} \t\t$columns \tThe column width\n * @param \t\t{Integer} \t\t$context \tThe context on which to calculate the column width\n *\n * @example \tscss\n * \\@include g-register-column(1on5, 1, 5);\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-register-column(\n\t$name,\n\t$columns,\n\t$context\n) {\n\t// create a column :\n\t$col : _g-create-column($name, $columns, $context);\n\n\t// add column in maps :\n\t$_g-columns : map-set($_g-columns, $name, $col) !global;\n}\n\n\n/**\n * Set a pattern for a specified package used to generate the classnames\n * @param \t\t{String} \t$package \t\tThe package name to specify the pattern for\n * @param \t\t{List} \t\t$pattern \t\tThe new classname pattern\n *\n * @example \tscss\n * \\@include g-set-classname-map(grid, ('grid','-','%count','@','%state'));\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-set-classname-map(\n\t$package,\n\t$pattern\n) {\n\t// get the map\n\t$map : map-get($_gridle-packages, $package);\n\t// set the new classname\n\t$map : map-set($map, classname, $pattern);\n\t// set the classmap\n\t$_gridle-packages : map-set($_gridle-packages, $package, $map) !global;\n}\n\n\n/**\n * Set a generic selector for a specific package. This generic selector will be used to target some elements like [class*=\"gr-\"].\n * If not specified for a package, the generic selector will be generated automatically but sometimes it's better to hardcode it.\n * @param \t\t{String} \t\t$package \t\tThe package to specify the generic selector for\n * @param \t\t{String} \t\t$selector \t\tThe generic selector like [class*=\"gr-\"], or whatever...\n * @example \tscss\n * \\@include g-set-generic-selector(grid, '[class*=\"gr-\"]');\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-set-generic-selector(\n\t$package,\n\t$selector\n) {\n\t// get the map\n\t$map : map-get($_gridle-packages, $package);\n\t// set the new classname\n\t$map : map-set($map, generic-selector, $selector);\n\t// set the classmap\n\t$_gridle-packages : map-set($_gridle-packages, $package, $map) !global;\n}\n\n\n\n//\n// Extend a gridle class\n//\n// map format :\n// (\n// \tgrid : (\n// \t\tmobile : (\n// \t\t\tpadding : 10px,\n// \t\t\tfloat : left\n// \t\t),\n// \t\ttablet : (\n// \t\t\tpadding : 10px\n// \t\t)\n// \t),\n// \tflex-grid : (\n// \t\tmobile : (\n// \t\t\tpadding : 10px\n// \t\t)\n// \t)\n// )\n//\n// @mixin g-extend-base-class(\n// \t$for,\n// \t$extend,\n// \t$statesNames : null\n// ) {\n// \t// if $states is all\n// \t@if $statesNames == null {\n// \t\t$statesNames : g-get-states-names();\n// \t}\n\n// \t// allow multiple \"$for\"\n// \t@each $f in $for {\n\n// \t\t// get the map for the passed mixin \"category\"\n// \t\t$forMap : map-get($_g-extend-base-classes, $f);\n\n// \t\t// create the map if not exist\n// \t\t@if $forMap == null { $forMap : (); }\n\n// \t\t// loop on each states to register an extend map\n// \t\t@each $stateName in $statesNames {\n\n// \t\t\t// check if has a map for the state\n// \t\t\t$forStateMap : map-get($forMap, $stateName);\n// \t\t\t@if $forStateMap == null {\n// \t\t\t\t$forStateMap : ();\n// \t\t\t}\n\n// \t\t\t// merge map\n// \t\t\t$forStateMap : map-merge($forStateMap, $extend);\n\n// \t\t\t// set the new state map into forMap\n// \t\t\t$forMap : map-set($forMap, $stateName, $forStateMap);\n\n// \t\t\t// set the map in the gridle global variable\n// \t\t\t$_g-extend-base-classes : map-set($_g-extend-base-classes, $f, $forMap) !global;\n\n// \t\t}\n\n// \t}\n// }\n// @TODO : Docblock for g-extend-base-class\n@mixin g-extend-base-class(\n\t$for,\n\t$extend,\n\t$statesNames : null\n) {\n\t// if $states is all\n\t@if $statesNames == null {\n\t\t$statesNames : g-get-states-names();\n\t}\n\n\t// allow multiple \"$for\"\n\t@each $stateName in $statesNames {\n\n\t\t// get the map for the passed mixin \"category\"\n\t\t$stateMap : map-get($_g-extend-base-classes, $stateName);\n\n\t\t// create the map if not exist\n\t\t@if $stateMap == null { $stateMap : (); }\n\n\t\t// loop on each states to register an extend map\n\t\t@each $f in $for {\n\n\t\t\t// check if has a map for the state\n\t\t\t$forStateMap : map-get($stateMap, $f);\n\t\t\t@if $forStateMap == null {\n\t\t\t\t$forStateMap : ();\n\t\t\t}\n\n\t\t\t// merge map\n\t\t\t$forStateMap : map-merge($forStateMap, $extend);\n\n\t\t\t// set the new state map into forMap\n\t\t\t$stateMap : map-set($stateMap, $f, $forStateMap);\n\n\t\t\t// set the map in the gridle global variable\n\t\t\t$_g-extend-base-classes : map-set($_g-extend-base-classes, $stateName, $stateMap) !global;\n\t\t}\n\t}\n}\n\n//\n// Apply css for\n//\n// map format :\n// (\n// \t(\n// \t\tgrid : (\n// \t\t\tmobile : (\n// \t\t\t\tpadding : 0,\n// \t\t\t\tmargin : 0\n// \t\t\t),\n// \t\t\ttablet : (\n// \t\t\t\tpadding : 0\n// \t\t\t)\n// \t\t)\n// \t),\n// \t(\n// \t\tetc...\n// \t)\n// )\n// @mixin g-apply-css-for(\n// \t$for,\n// \t$extend,\n// \t$statesNames : null\n// ) {\n\n// \t// if statesNames is null, mean that it's all the states\n// \t@if $statesNames == null {\n// \t\t$statesNames : g-get-states-names();\n// \t}\n\n// \t// allow multiple \"$for\"\n// \t@each $f in $for {\n\n// \t\t// get the map for the passed mixin \"category\"\n// \t\t$stateMap : ();\n\n// \t\t// loop on each states to register an extend map\n// \t\t@each $stateName in $statesNames {\n// \t\t\t// add the css\n// \t\t\t$stateMap : map-set($stateMap, $stateName, $extend);\n// \t\t}\n\n// \t\t// set in map\n// \t\t$forMap : map-set((), $f, $stateMap);\n\n// \t\t// set the map in the gridle global variable\n// \t\t$_g-apply-css-for : append($_g-apply-css-for, $forMap) !global;\n\n// \t}\n// }\n// @TODO : Docblock for g-apply-css-for\n@mixin g-apply-css-for(\n\t$for,\n\t$extend,\n\t$statesNames : null\n) {\n\n\t// if statesNames is null, mean that it's all the states\n\t@if $statesNames == null {\n\t\t$statesNames : g-get-states-names();\n\t}\n\n\t// allow multiple \"$for\"\n\t@each $stateName in $statesNames {\n\n\t\t// get the map for the passed mixin \"category\"\n\t\t$forMap : ();\n\n\t\t// loop on each states to register an extend map\n\t\t@each $f in $for {\n\t\t\t// add the css\n\t\t\t$forMap : map-set($forMap, $f, $extend);\n\t\t\t// $stateMap : map-set($stateMap, $stateName, $extend);\n\t\t}\n\n\t\t// set in map\n\t\t$statesMap : map-set((), $stateName, $forMap);\n\n\t\t// set the map in the gridle global variable\n\t\t$_g-apply-css-for : append($_g-apply-css-for, $statesMap) !global;\n\t}\n}\n\n\n/**\n * Register some basics states:\n *\n * - mobile : 0 to 480px\n * - tablet : 481px to 1024px\n *\n * @example \tscss\n * \\@include g-register-default-states();\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-register-default-states() {\n\t@include g-register-state(mobile, (\n\t\tmax-width : 480px\n\t));\n\t@include g-register-state(tablet, (\n\t\tmin-width : 481px,\n\t\tmax-width : 1024px\n\t));\n}\n\n\n/**\n * Register some basics mobile first states:\n *\n * - mobile : 320px to infinite\n * - tablet : 640px to infinite\n * - desktop : 992px to infinite\n * - large : 1200px to infinite\n *\n * @example \tscss\n * \\@include g-register-mobile-first-states();\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-register-mobile-first-states() {\n\t@include g-register-state(mobile, (\n\t\tmin-width : 320px\n\t));\n\t@include g-register-state(tablet, (\n\t\tmin-width : 640px\n\t));\n\t@include g-register-state(desktop, (\n\t\tmin-width : 992px\n\t));\n\t@include g-register-state(large, (\n\t\tmin-width : 1200px\n\t));\n}\n\n\n/**\n * Register bootstrap 3 states\n *\n * - xs : 0 to 750px\n * - sm : 750px to infinite\n * - md : 970px to infinite\n * - lg : 1170px to infinite\n *\n * @example \tscss\n * \\@include g-register-bootstrap3-states();\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-register-bootstrap3-states() {\n\t@include g-register-state(xs, (\n\t\tmax-width : 750px\n\t));\n\t@include g-register-state(sm, (\n\t\tmin-width : 750px\n\t));\n\t@include g-register-state(md, (\n\t\tmin-width : 768px\n\t));\n\t@include g-register-state(lg, (\n\t\tmin-width : 1200px\n\t));\n}\n\n\n/**\n * Register bootstrap 4 states\n *\n * - xs : 0 to 576px\n * - sm : 576px to infinite\n * - md : 970px to infinite\n * - lg : 1200px to infinite\n *\n * @example \tscss\n * \\@include g-register-bootstrap4-states();\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-register-bootstrap4-states() {\n\t@include g-register-state(xs, (\n\t\tmax-width : 576px\n\t));\n\t@include g-register-state(sm, (\n\t\tmin-width : 576px\n\t));\n\t@include g-register-state(md, (\n\t\tmin-width : 768px\n\t));\n\t@include g-register-state(lg, (\n\t\tmin-width : 1200px\n\t));\n}\n","// |------------------------------------------------------\n// |------------------------------------------------------\n// | Mixins\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n\n//\n// Init\n// called by _g-call mixin multiple times\n//\n@mixin g-init() {\n\t@if $_g-inited == false {\n\t\t$_g-inited : true !global;\n\t\t@each $stateName, $state in $_g-states {\n\t\t\t$classes : g-get-state-var(classes, $state);\n\t\t\t@if $classes {\n\t\t\t\t@at-root (without:all) {\n\t\t\t\t\t$q : g-get-media-query($state);\n\t\t\t\t\t@if $q {\n\t\t\t\t\t\t@media #{$q} {\n\t\t\t\t\t\t\t@include _g-init-common-silent-classes($state);\n\t\t\t\t\t\t}\n\t\t\t\t\t} @else {\n\t\t\t\t\t\t@include _g-init-common-silent-classes($state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n//\n// Init silent classes\n//\n@mixin _g-common-silent-class-name(\n\t$for,\n\t$stateName : default\n) {\n\t@if mixin-exists('_g_common_#{$for}') {\n\t\t%#{$stateName}-#{$for} {\n\t\t\t// inject content\n\t\t\t@content;\n\t\t}\n\t\t@at-root (without: media) {\n\t\t\t%at-root-#{$stateName}-#{$for} {\n\t\t\t\t// inject content\n\t\t\t\t@content;\n\t\t\t}\n\t\t}\n\t}\n}\n@mixin _g-init-common-silent-classes(\n\t$state : default\n) {\n\t// get state name\n\t$stateName : g-get-state-var(name, $state);\n\n\t// define packages to init\n\t// the order can matter here\n\t$packages : (\n\t\tcontainer,\n\t\tgrid-order,\n\t\trow,\n\t\trow-full,\n\t\trow-no-gutter,\n\t\tcol,\n\t\tgrid,\n\t\tgrid-table,\n\t\tgrid-adapt,\n\t\tgrid-grow,\n\t\tpush,\n\t\tpull,\n\t\tprefix,\n\t\tsuffix,\n\t\tnowrap,\n\t\twrap,\n\t\tclear-each,\n\t\tgrid-centered,\n\t\trow-align,\n\t\thide,\n\t\tnot-visible,\n\t\tshow,\n\t\tshow-inline,\n\t\tvisible,\n\t\tfloat,\n\t\tclear,\n\t\tno-gutter,\n\t\tgutter,\n\t\trow-debug\n\t);\n\n\t// loop on each packages to init their common silient classes\n\t@each $package in $packages {\n\t\t// include common\n\t\t@include _g-common-silent-class-name($package, $stateName) {\n\t\t\t@include _g-include-common($package, $stateName);\n\t\t}\n\t}\n}\n\n@mixin _g-include-common(\n\t$package,\n\t$state : current\n) {\n\n\t// get state name\n\t$state : g-get-state($state);\n\n\t// container\n\t@if $package == container {\n\t\t@include _g-common-container($state);\n\t}\n\n\t// order\n\t@if $package == grid-order {\n\t\t@include _g-common-grid-order($state);\n\t}\n\n\t// row\n\t@if $package == row {\n\t\t@include _g-common-row($state);\n\t}\n\n\t// row-full\n\t@if $package == row-full {\n\t\t@include _g-common-row_full($state);\n\t}\n\n\t// col\n\t@if $package == col {\n\t\t@include _g-common-col($state);\n\t}\n\n\t// grid\n\t@if $package == grid {\n\t\t@include _g-common-grid($state);\n\t}\n\n\t// grid-table\n\t@if $package == grid-table {\n\t\t@include _g-common-grid-table($state);\n\t}\n\n\t// grid-adapt\n\t@if $package == grid-adapt {\n\t\t@include _g-common-grid-adapt($state);\n\t}\n\n\t// grid-grow\n\t@if $package == grid-grow {\n\t\t@include _g-common-grid-grow($state);\n\t}\n\n\t// push\n\t@if $package == push{\n\t\t@include _g-common-push($state);\n\t}\n\n\t// pull\n\t@if $package == pull{\n\t\t@include _g-common-pull($state);\n\t}\n\n\t// prefix\n\t@if $package == prefix{\n\t\t@include _g-common-prefix($state);\n\t}\n\n\t// suffix\n\t@if $package == suffix {\n\t\t@include _g-common-suffix($state);\n\t}\n\n\t// nowrap\n\t@if $package == nowrap {\n\t\t@include _g-common-nowrap($state);\n\t}\n\n\t// wrap\n\t@if $package == wrap {\n\t\t@include _g-common-wrap($state);\n\t}\n\n\t// clear-each\n\t@if $package == clear-each {\n\t\t@include _g-common-clear-each($state);\n\t}\n\n\t// centered\n\t@if $package == grid-centered {\n\t\t@include _g-common-grid-centered($state);\n\t}\n\n\t// row-align\n\t@if $package == row-align {\n\t\t@include _g-common-row-align($state);\n\t}\n\n\t// hide\n\t@if $package == hide {\n\t\t@include _g-common-hide($state);\n\t}\n\n\t// not-visible\n\t@if $package == not-visible {\n\t\t@include _g-common-not-visible($state);\n\t}\n\n\t// show\n\t@if $package == show{\n\t\t@include _g-common-show($state);\n\t}\n\n\t// show-inline\n\t@if $package == show-inline {\n\t\t@include _g-common-show-inline($state);\n\t}\n\n\t// visible\n\t@if $package == visible {\n\t\t@include _g-common-visible($state);\n\t}\n\n\t// float\n\t@if $package == float {\n\t\t@include _g-common-float($state);\n\t}\n\n\t// clear\n\t@if $package == clear {\n\t\t@include _g-common-clear($state);\n\t}\n\n\t// row-no-gutter\n\t@if $package == row-no-gutter {\n\t\t@include _g-common-row-no-gutter($state);\n\t}\n\n\t// no-gutter\n\t@if $package == no-gutter {\n\t\t@include _g-common-no-gutter($state);\n\t}\n\n\t// gutter\n\t@if $package == gutter {\n\t\t@include _g-common-gutter($state);\n\t}\n\n\t// row debug\n\t@if $package == row-debug {\n\t\t@include _g-common-row-debug($state);\n\t}\n\n\t// extend common class by the registered css\n\t@include _g-extend-common-class($package, $state);\n}\n\n\n//\n// Wrap gridle mixin content to init if needed and then if needed\n//\n@mixin _g-call(\n\t$for : null\n) {\n\t// init if needed\n\t@include g-init();\n\n\t// put content\n\t@content;\n\n\t// extend and apply css for different states\n\t@if $for {\n\t\t@include _g-extend($for);\n\t\t@if not _g-is-in-generate-phase() {\n\t\t\t@include _g-apply-css-for($for);\n\t\t}\n\t}\n}\n\n\n//\n// Extend\n// @stateContext\n// @calledBy \t\t_g-call\n//\n@mixin _g-extend(\n\t$package\n) {\n\t// check if we need the state classes\n\t$states-classes : g-get-state-var(states-classes);\n\t$stateName : g-get-state-var(name);\n\n\t// if is an existing gridle state\n\t@if g-has-state($stateName) {\n\t\t// extend the \"at-root\" version for the .state-{stateName} classes\n\t\t@if $states-classes and str-index(unquote(\"#{&}\"), unquote('.state-#{$_g-current-stateName}')) {\n\t\t\t// @at-root (without: media) { // seems not needed here, cause issues with libsass\n\t\t\t\t// @debug(\"%at-root-#{$_g-current-stateName}-#{$package}\");\n\t\t\t\t@extend %at-root-#{$_g-current-stateName}-#{$package} !optional;\n\t\t\t// }\n\t\t} @else {\n\t\t\t// extend using the current state name set in each g-state call\n\t\t\t// @debug(\"%#{$_g-current-stateName}-#{$package}\");\n\t\t\t@extend %#{$_g-current-stateName}-#{$package} !optional;\n\t\t}\n\t} @else {\n\t\t// it's not an existing state so we cannot extend.\n\t\t// we need to include instead\n\t\t@include _g-include-common($package, $stateName);\n\t}\n}\n\n\n//\n// Apply the registered css for a certain type (grid, push, etc...)\n// in each states\n//\n$_gridle_applied_for : ();\n@mixin _g-apply-css-for(\n\t$_for\n) {\n\t$selector : \"#{&}-#{$_for}\"; // generate a unique name that will be stacked in a map to generate only 1 time\n\t@if map-get($_gridle_applied_for, $selector) == null {\n\t\t$_gridle_applied_for : map-set($_gridle_applied_for, $selector, true) !global;\n\t\t$fors-patterns : $_gridle-packages;\n\t\t@each $map in $_g-apply-css-for {\n\t\t\t@each $stateName, $fors in $map {\n\t\t\t\t$rules : map-get($fors, $_for);\n\t\t\t\t@if $rules and map-get($fors-patterns, $_for) {\n\t\t\t\t\t@at-root (without : media) {\n\t\t\t\t\t\t@include _g-state($stateName, true, false) {\n\t\t\t\t\t\t\t@include g-state-context($stateName) {\n\t\t\t\t\t\t\t\t@include _g-map-2-css($rules);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n//\n// Gridle state\n//\n// @param \tstring|map|list \t$states \t\tA list of states, a state name or a state map\n// @param \tboolean \t\t\t$has-parent \tMostly always true, mean that the mixin is used in a css selector and not in css root level\n//\n@mixin _g-state(\n\t$state : default,\n\t$has-parent : true,\n\t$track-current-state : true\n) {\n\n\t// variables :\n\t$state : g-get-state($state);\n\t$states-classes : g-get-state-var(states-classes, $state);\n\t$stateName : g-get-state-var(name, $state);\n\n\t// manage previous state\n\t$previous_state : null;\n\t$previous_stateName : null;\n\n\t// check if need to tack the current state\n\t@if $track-current-state {\n\t\t@if $_g-current-state {\n\t\t\t$previous_state : $_g-current-state;\n\t\t\t$previous_stateName : $_g-current-stateName;\n\t\t}\n\t\t// if we have a previous state that is not the default one, we\n\t\t// make the inheritence process.\n\t\t// if both states are registered ones : just take the wanted state\n\t\t// if only previous_state is a registered one : extend previous_state with the wanted one\n\t\t// if none of them are resitered : extend the wanted with the previous one\n\t\t@if $previous_state {\n\t\t\t$_g-current-state : _g-inherit-state($state, $previous_state) !global;\n\t\t} @else {\n\t\t\t$_g-current-state : $state !global;\n\t\t}\n\t\t$_g-current-stateName : $stateName !global;\n\t}\n\n\t// check if is a state :\n\t@if ($states-classes)\n\t\tand $stateName {\n\t\t// html class :\n\t\t@at-root (without: media) {\n\t\t\t@if $has-parent {\n\t\t\t\t.state-#{$stateName} & {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\t\t\t} @else {\n\t\t\t\t.state-#{$stateName} {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// get the media query :\n\t$q : g-get-media-query($state);\n\n\t// make the media query if a query exist :\n\t@if $q {\n\t\t@media #{$q} {\n\t\t\t@content;\n\t\t}\n\t} @else {\n\t\t@content;\n\t}\n\n\t// reset current state to default\n\t@if $track-current-state and $previous_state and $previous_stateName {\n\t\t$_g-current-state : $previous_state !global;\n\t\t$_g-current-stateName : $previous_stateName !global;\n\t}\n}\n\n\n//\n// Transform map to css\n//\n@mixin _g-map-2-css(\n\t$map\n) {\n\t@each $key, $value in $map {\n\t\t@if type-of($value) == map {\n\t\t\t&#{$key} {\n\t\t\t\t@each $k, $v in $value {\n\t\t\t\t\t@if $k != null and str-index($k, g) and mixin-exists($k) {\n\t\t\t\t\t\t$set-name : str-replace($k, \"g-\", \"\");\n\t\t\t\t\t\t$set-name : str-replace($set-name, \"_\", \"-\");\n\t\t\t\t\t\t@include _g-set((\n\t\t\t\t\t\t\t$set-name : $v\n\t\t\t\t\t\t));\n\t\t\t\t\t} @else {\n\t\t\t\t\t\t#{$k}:#{$v};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} @else {\n\t\t\t@if $key != null and str-index($key, g) and mixin-exists($key) {\n\t\t\t\t$set-name : str-replace(\"#{$key}\", \"g-\", \"\");\n\t\t\t\t$set-name : str-replace(\"#{$set-name}\", \"_\", \"-\");\n\t\t\t\t@include _g-set((\n\t\t\t\t\t$set-name : $value\n\t\t\t\t));\n\t\t\t} @else {\n\t\t\t\t#{$key}:#{$value};\n\t\t\t}\n\t\t}\n\t}\n}\n\n//\n// Extend common class\n//\n@mixin _g-extend-common-class(\n\t$what,\n\t$state : default\n) {\n\t// extend\n\t$stateName : g-get-state-var(name, $state);\n\t$extend : _g-get-extend-class-map($what, $stateName);\n\t@if $extend != null {\n\t\t@include _g-map-2-css($extend);\n\t}\n}\n","/**\n * @name \tBase API\n * This are all the base API mixins that are exposed by gridle.\n */\n\n/**\n * Specify a layout using a single call like in the example bellow\n * @param \t\t{Map} \t\t\t\t$layout \t\t\t\tThe map layout wanted\n * @param \t\t{Map|List|String} \t[$context=null] \t\tThe context in which to apply the layout\n * @example \tscss\n * body {\n * \t\\@include g-layout((\n * \t \t'#header' : 12,\n * \t \t'#sidebar' : 4 mobile 12,\n * \t \t'#content' : 8 mobile 12,\n * \t \t'#footer' : 12\n * \t));\n * }\n *\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-layout(\n\t$layout,\n\t$context : null\n) {\n\t@include g-state($context) {\n\t\t@include g-row();\n\t\t@each $sel, $l in $layout {\n\t\t\t> #{$sel} {\n\t\t\t\t@include gridle($l);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Apply some styling in a passed state\n * @param \t\t{Map|List|String} \t\t$states \t\tThe states to apply the css for. Can be a state map, a list of states or a state name\n * @example \tscss\n * .my-cool-element {\n * \t// specify a register state name\n * \t\\@include g-state(mobile) {\n * \t\t// your css code here...\n * \t}\n * \t// specify more than one register states\n * \t\\@include g-state(mobile tablet) {\n * \t\t// your css code here...\n * \t}\n *  // specify a min and max width\n * \t\\@include g-state(200px, 500px) {\n * \t\t// your css code here...\n * \t}\n * \t// passing a state map (complexe usage)\n * \t\\@include g-state((\n * \t\tquery : 'print only'\n * \t)) {\n * \t\t// your code here...\n * \t}\n * }\n *\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-state(\n\t$states,\n\t$has-parent : true\n) {\n\n\t// check if is a min-max witdh query (compatibility layer)\n\t@if type-of($states) == number and type-of($has-parent) == number {\n\n\t\t// get a new state from settings passed\n\t\t$state : g-get-state((\n\t\t\tmin-width : $states,\n\t\t\tmax-width : $has-parent\n\t\t));\n\n\t\t// make a query\n\t\t@include g-state($state) {\n\t\t\t@content;\n\t\t}\n\n\t} @elseif type-of($states) == list\n\t\tor type-of($states) == string {\n\n\t\t// loop on each states :\n\t\t@each $state in $states\n\t\t{\n\t\t\t// make sure we have the state object\n\t\t\t$state : g-get-state($state);\n\n\t\t\t// make gridle state\n\t\t\t@include _g-state($state, $has-parent, true) {\n\t\t\t\t@content;\n\t\t\t}\n\t\t}\n\n\t} @elseif type-of($states) == map {\n\n\t\t// get a state from the passed one\n\t\t$state : g-get-state($states);\n\n\t\t// make gridle state\n\t\t@include _g-state($state, $has-parent, true) {\n\t\t\t@content;\n\t\t}\n\t} @else {\n\t\t@content;\n\t}\n}\n\n/**\n * Apply some css depending on the element size (element queries)\n * **Using this mixin requires that you import the ```gridle-eq.js``` file into your javascript code**\n * @param \t{Number} \t$size \t\t\t\tThe size to take care of. If negative, mean lower than, if positive, mean greater than.\n * @param \t{Boolean} \t[$height=false] \tSet to true to handle height instead of width\n * @example \tscss\n * .my-cool-element {\n *  \t\\@include g-eq(-400px) {\n *  \t\t// your css that will be applied when element\n *  \t\t// is between 0 and 399px wide\n *  \t}\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-eq(\n\t$size,\n\t$height : false\n) {\n\t$op : \"min-width\";\n\t@if $height {\n\t\t@if $size < 0 {\n\t\t\t$op : \"max-height\";\n\t\t\t$size : $size * -1;\n\t\t} @else {\n\t\t\t$op : \"min-height\";\n\t\t}\n\t} @else {\n\t\t@if $size < 0 {\n\t\t\t$op : \"max-width\";\n\t\t\t$size : $size * -1;\n\t\t}\n\t}\n\n\t&[#{$op}~=\"#{$size}\"] {\n\t\t@content;\n\t}\n}\n\n\n/**\n * Basically, this is the same as the ```g-state``` mixin, with the difference that it will not print any media queries. It will just create a state context in which your inside code will refer.\n * @param \t\t{Map|List|String} \t\t$states \t\tThe states to apply the css for. Can be a state map, a list of states or a state name\n * @example \tscss\n * @warn(g-get-state-var(min-width)); // will output the min-width of the default state\n * \\@include g-state-context(mobile) {\n *  \t@warn(g-get-state-var(min-width)); // will output the min-width of the mobile state\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-state-context(\n\t$state\n) {\n\t// get the state\n\t$state : g-get-state($state);\n\t$stateName : g-get-state-var(name, $state);\n\n\t// save the current state\n\t$savedState : $_g-current_state;\n\t$savedStateName : $_g-current_stateName;\n\n\t// set the current state\n\t$_g-current_state : $state !global;\n\t$_g-current_stateName : $stateName !global;\n\n\t// generate content\n\t@content;\n\n\t// reset the state\n\t$_g-current_state : $savedState !global;\n\t$_g-current_stateName : $savedStateName !global;\n}\n\n\n/**\n * Will print the generated selector depending on the \"package\" wanted, the state and some optional values that might be needed by the package (like for row-align that need a \"side\" value)\n * @param \t\t{String} \t\t\t\t\t\t\t$package \t\t\tThe package to generate the selector for (see _settings.scss file)\n * @param \t\t{String|List<String} \t\t\t\t[$states=null] \t\tThe list of state to generate the selector for. If not specified, will generate for all registered states\n * @param \t\t{Mixed} \t\t\t\t\t\t\t[$value=null] \t\tThe value that will be used to replace the \"%{tokenName}\" inside the package pattern\n * @example \tscss\n * \\@include g-selector(grid, mobile, 2) {\n * \t// your code here\n * \t// The selector will be .gr-2@mobile\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-selector(\n\t$package,\n\t$states : null,\n\t$value : null\n) {\n\t#{g-selector($package, $states, $value)} {\n\t\t@content;\n\t}\n}\n\n\n/**\n * Helper gridle mixin that let you specify the grid properties through ```g-set``` map, or a list of properties like \"8 push 2 mobile 12 push 0\"\n * @param \t\t{Map|List} \t\t\t$properties \t\t\tThe grid properties to apply\n * @example \tscss\n * #content {\n * \t// using list\n * \t\\@include gridle(8 mobile 12);\n * \t// using a map\n * \t\\@include gridle((\n * \t\tgrid : 8,\n * \t\tmobile : (\n * \t\t\tgrid : 12\n * \t\t)\n * \t));\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin gridle($properties) {\n\t@if type-of($properties) == map {\n\t\t@include g-set($map);\n\t} @else if type-of($properties) == list\n\t \tor type-of($properties) == number\n\t\tor type-of($properties) == string {\n\t\t$map : _g-get-gridle-set-map-from-list($properties);\n\t\t@if type-of($map) == map {\n\t\t\t@include g-set($map);\n\t\t}\n\t} @else {\n\t\t@error(\"The passed layout #{inspect($properties)} is not a valid layout list or map...\");\n\t}\n}\n\n/**\n * Helper mixin that let you specify the grid properties through map formated like in the example bellow.\n * Here's the possible properties:\n *\n * - ```grid``` {Integer} : The grid column count\n * - ```container``` {Boolean} : Set the element as container\n * - ```grid-grow``` {Boolean} : Set the element a grid column that grow\n * - ```grid-adapt``` {Boolean} : Set the element a grid column that adapt\n * - ```grid-table``` {Boolean} : Set the element a grid column of type table\n * - ```push``` {Integer} : Set the push count\n * - ```pull``` {Integer} : Set the pull count\n * - ```prefix``` {Integer} : Set the prefix count\n * - ```suffix``` {Integer} : Set the suffix count\n * - ```clear-each``` {Integer} : Set the clear each count\n * - ```grid-centered``` {Boolean} : Set the grid column as centered\n * - ```row``` {Boolean} : Set the element as a grid row\n * - ```row-full``` {Boolean} : Set the element as a grid row full\n * - ```col``` {Boolean} : Set the element as a grid column (vertical)\n * - ```row-align``` {String} : Set the row alignement\n * - ```row-no-gutter``` {Boolean} : Remove the gutters on columns inside this row\n * - ```nowrap``` {Boolean} : Set a nowrap on the row\n * - ```wrap``` {Boolean} : Reset the wrap property on the row\n * - ```order``` {Integer} : Set the order of the column (flex driver)\n * - ```hide``` {Boolean} : Hide the element\n * - ```show``` {Boolean} : Show the element\n * - ```visible``` {Boolean} : Set the visibility of the element to visible\n * - ```not-visible``` {Boolean} : Set the visibility of the element to hidden\n * - ```invisible``` {Boolean} : Set the visibility of the element to hidden\n * - ```show-inline``` {Boolean} : Set the display of the element to inline-block\n * - ```float``` {String} : Set the specified float of the element\n * - ```clear``` {String} : Clear the specified float of the element\n * - ```no-gutter``` {Boolean|String|List<String>} : Remove the specified gutters\n * - ```gutter``` {Boolean|String|List<String>} : Apply the specified gutters\n *\n * @param \t\t{Map} \t\t\t$properties \t\t\tThe grid map properties to apply\n * @example \tscss\n * #content {\n * \t// using a map\n * \t\\@include gridle((\n * \t\tgrid : 8,\n * \t\tpush : 2\n * \t\tmobile : (\n * \t\t\tgrid : 12\n * \t\t),\n * \t\t{stateName} : {mapProperties}\n * \t));\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-set(\n\t$propertiesMap,\n\t$state : current\n) {\n\t// init if needed\n\t@include g-init();\n\t// wrap in media query\n\t@include g-state($state) {\n\t\t@include _g-set($propertiesMap);\n\t}\n}\n@mixin _g-set(\n\t$propertiesMap\n) {\n\t// loop on each settings\n\t@each $propertyName, $propertyValue in $propertiesMap\n\t{\n\t\t$sn : unquote(\"#{$propertyName}\");\n\t\t$sv : $propertyValue;\n\n\t\t// check if setting name is a state :\n\t\t@if g-has-state($sn) {\n\t\t\t// process the state\n\t\t\t@include g-set($sv, $sn);\n\t\t} @else {\n\t\t\t@if $sn == container {\n\t\t\t\t@if $sv == true {\n\t\t\t\t\t@include g-container();\n\t\t\t\t}\n\t\t\t} @else if $sn == grid {\n\t\t\t\t@if length($sv) == 2 {\n\t\t\t\t\t@include g-grid(nth($sv,1), nth($sv,2));\n\t\t\t\t} @else if type-of($sv) == list and length($sv) == 1 {\n\t\t\t\t\t@include g-grid(nth($sv,1));\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-grid($sv);\n\t\t\t\t}\n\t\t\t} @else if $sn == grid-grow {\n\t\t\t\t@if $sv == true {\n\t\t\t\t\t@include g-grid-grow();\n\t\t\t\t}\n\t\t\t} @else if $sn == grid-adapt {\n\t\t\t\t@if $sv == true {\n\t\t\t\t\t@include g-grid-adapt();\n\t\t\t\t}\n\t\t\t} @else if $sn == grid-table {\n\t\t\t\t@if $sv == true {\n\t\t\t\t\t@include g-grid-table();\n\t\t\t\t}\n\t\t\t} @else if $sn == push {\n\t\t\t\t@if length($sv) == 2 {\n\t\t\t\t\t@include g-push(nth($sv,1), nth($sv,2));\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-push($sv);\n\t\t\t\t}\n\t\t\t} @else if $sn == pull {\n\t\t\t\t@if length($sv) == 2 {\n\t\t\t\t\t@include g-pull(nth($sv,1), nth($sv,2));\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-pull($sv);\n\t\t\t\t}\n\t\t\t} @else if $sn == prefix {\n\t\t\t\t@if length($sv) == 2 {\n\t\t\t\t\t@include g-prefix(nth($sv,1), nth($sv,2));\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-prefix($sv);\n\t\t\t\t}\n\t\t\t} @else if $sn == suffix {\n\t\t\t\t@if length($sv) == 2 {\n\t\t\t\t\t@include g-suffix(nth($sv,1), nth($sv,2));\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-suffix($sv);\n\t\t\t\t}\n\t\t\t} @else if $sn == clear-each {\n\t\t\t\t@if length($sv) == 2 {\n\t\t\t\t\t@include g-clear-each(nth($sv,1), nth($sv,2));\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-clear-each($sv);\n\t\t\t\t}\n\t\t\t} @else if $sn == grid-centered and $sv == true {\n\t\t\t\t@include g-grid-centered();\n\t\t\t} @else if $sn == row and $sv == true {\n\t\t\t\t@include g-row();\n\t\t\t} @else if $sn == row-full and $sv == true {\n\t\t\t\t@include g-row-full();\n\t\t\t} @else if $sn == col and $sv == true {\n\t\t\t\t@include g-col();\n\t\t\t} @else if $sn == row-align {\n\t\t\t\t@include g-row-align($sv);\n\t\t\t} @else if $sn == row-no-gutter {\n\t\t\t\t@include g-row-no-gutter($sv);\n\t\t\t} @else if $sn == nowrap {\n\t\t\t\t@if $sv == true {\n\t\t\t\t\t@include g-nowrap();\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-wrap();\n\t\t\t\t}\n\t\t\t} @else if $sn == wrap {\n\t\t\t\t@if $sv == true {\n\t\t\t\t\t@include g-wrap();\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-nowrap();\n\t\t\t\t}\n\t\t\t} @else if $sn == order {\n\t\t\t\t@include g-order($sv);\n\t\t\t} @else if $sn == hide {\n\t\t\t\t@if $sv == true {\n\t\t\t\t\t@include g-hide();\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-show();\n\t\t\t\t}\n\t\t\t} @else if $sn == show {\n\t\t\t\t@if $sv == true {\n\t\t\t\t\t@include g-show();\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-hide();\n\t\t\t\t}\n\t\t\t} @else if $sn == visible {\n\t\t\t\t@if $sv == true {\n\t\t\t\t\t@include g-visible();\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-not-visible();\n\t\t\t\t}\n\t\t\t} @else if $sn == not-visible or $sn == invisible {\n\t\t\t\t@if $sv == true {\n\t\t\t\t\t@include g-not-visible();\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-visible();\n\t\t\t\t}\n\t\t\t} @else if $sn == show-inline {\n\t\t\t\t@if $sv == true {\n\t\t\t\t\t@include g-show-inline();\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-hide();\n\t\t\t\t}\n\t\t\t} @else if $sn == float {\n\t\t\t\t@include g-float($sv);\n\t\t\t} @else if $sn == clear {\n\t\t\t\t@if $sv == true {\n\t\t\t\t\t@include g-clear();\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-clear($sv);\n\t\t\t\t}\n\t\t\t} @else if $sn == no-gutter {\n\t\t\t\t@if $sv == true {\n\t\t\t\t\t@include g-no-gutter();\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-no-gutter($sv);\n\t\t\t\t}\n\t\t\t} @else if $sn == gutter or $sn == gutter-width {\n\t\t\t\t@if $sv == true {\n\t\t\t\t\t@include g-gutter();\n\t\t\t\t} @else {\n\t\t\t\t\t@include g-gutter($sv);\n\t\t\t\t}\n\t\t\t} @else {\n\t\t\t\t// we do nothing\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n@mixin _g-common-push(\n\t$state : default\n) {\n\t// css\n\tposition:relative;\n\t// handle direction attribute\n\t@if g-get-state-var(dir-attribute, $state) {\n\t\t[dir=\"rtl\"] & {\n\t\t\tleft: auto;\n\t\t}\n\t\t[dir=\"ltr\"] & {\n\t\t\tright: auto;\n\t\t}\n\t}\n}\n/**\n * Set the push count for the column\n * @param \t\t{Integer} \t\t$columns \t\t\tThe number of columns to push this column\n * @param \t\t{Integer} \t\t[$context=null]  \tThe context on which to calculate the push value. By default, it is the default context setted with ```g-setup```.\n * @example \tscss\n * .my-cool-column {\n * \t\\@include g-push(2);\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-push(\n\t$columns,\n\t$context : null\n) {\n\t@include _g-call(push) {\n\t\t// variables :\n\t\t@if type-of($context) != number {\n\t\t\t$context : g-get-state-var(context);\n\t\t}\n\t\t$direction : g-get-state-var(direction);\n\t\t$name-multiplicator : g-get-state-var(name-multiplicator);\n\t\t$column-width : g-get-state-var(column-width);\n\n\t\t// vars :\n\t\t$width : 0;\n\t\t@if $column-width {\n\t\t\t$width : $column-width * ($columns / $name-multiplicator);\n\t\t} @else {\n\t\t\t$width : percentage(1 / $context) * ($columns / $name-multiplicator);\n\t\t}\n\t\t// @if $direction == rtl { $width : $width*-1; }\n\t\t// left:$width;\n\t\t// @if $direction == ltr {\n\t\t// \t[dir=\"rtl\"] & {\n\t\t// \t\tleft: $width * -1;\n\t\t// \t}\n\t\t// }\n\n\t\t// set value :\n\t\t@if $direction == rtl { right:$width;left:auto; }\n\t\t@else { left:$width;right:auto; }\n\t\t// handle direction attribute\n\t\t@if g-get-state-var(dir-attribute) {\n\t\t\t[dir=\"rtl\"] & {\n\t\t\t\tright: $width;\n\t\t\t}\n\t\t\t[dir=\"ltr\"] & {\n\t\t\t\tleft: $width;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n@mixin _g-common-pull(\n\t$state : default\n) {\n\t// css\n\tposition:relative;\n\t// handle direction attribute\n\t@if g-get-state-var(dir-attribute, $state) {\n\t\t[dir=\"rtl\"] & {\n\t\t\tright: auto;\n\t\t}\n\t\t[dir=\"ltr\"] & {\n\t\t\tleft: auto;\n\t\t}\n\t}\n}\n/**\n * Set the pull count for the column\n * @param \t\t{Integer} \t\t$columns \t\t\tThe number of columns to pull this column\n * @param \t\t{Integer} \t\t[$context=null]  \tThe context on which to calculate the pull value. By default, it is the default context setted with ```g-setup```.\n * @example \tscss\n * .my-cool-column {\n * \t\\@include g-pull(2);\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-pull(\n\t$columns,\n\t$context : null\n) {\n\t@include _g-call(pull) {\n\t\t// variables :\n\t\t@if type-of($context) != number {\n\t\t\t$context : g-get-state-var(context);\n\t\t}\n\t\t$direction : g-get-state-var(direction);\n\t\t$name-multiplicator : g-get-state-var(name-multiplicator);\n\t\t$column-width : g-get-state-var(column-width);\n\n\t\t// vars :\n\t\t$width : 0;\n\t\t@if $column-width {\n\t\t\t$width : $column-width * ($columns / $name-multiplicator);\n\t\t} @else {\n\t\t\t$width : percentage(1 / $context) * ($columns / $name-multiplicator);\n\t\t}\n\t\t// @if $direction == rtl { $width : $width*-1; }\n\t\t// right:$width;\n\t\t// @if $direction == ltr {\n\t\t// \t[dir=\"rtl\"] & {\n\t\t// \t\tleft: $width * -1;\n\t\t// \t}\n\t\t// }\n\n\t\t// set value :\n\t\t@if $direction == rtl { left:$width;right:auto; }\n\t\t@else { right:$width;left:auto; }\n\t\t// handle direction attribute\n\t\t@if g-get-state-var(dir-attribute) {\n\t\t\t[dir=\"rtl\"] & {\n\t\t\t\tleft: $width;\n\t\t\t}\n\t\t\t[dir=\"ltr\"] & {\n\t\t\t\tright: $width;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n@mixin _g-common-prefix(\n\t$state : default\n) {\n\t// handle direction attribute\n\t@if g-get-state-var(dir-attribute, $state) {\n\t\t[dir=\"rtl\"] & {\n\t\t\tmargin-left: auto;\n\t\t}\n\t\t[dir=\"ltr\"] & {\n\t\t\tmargin-right: auto;\n\t\t}\n\t}\n}\n/**\n * Set the prefix count for the column\n * @param \t\t{Integer} \t\t$columns \t\t\tThe number of columns to prefix this column\n * @param \t\t{Integer} \t\t[$context=null]  \tThe context on which to calculate the prefix value. By default, it is the default context setted with ```g-setup```.\n * @example \tscss\n * .my-cool-column {\n * \t\\@include g-prefix(2);\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-prefix(\n\t$columns,\n\t$context : null\n) {\n\t@include _g-call(prefix) {\n\t\t// vars :\n\t\t@if type-of($context) != number {\n\t\t\t$context : g-get-state-var(context);\n\t\t}\n\t\t$direction : g-get-state-var(direction);\n\t\t$name-multiplicator : g-get-state-var(name-multiplicator);\n\t\t$column-width : g-get-state-var(column-width);\n\n\t\t// vars :\n\t\t$width : 0;\n\t\t@if $column-width {\n\t\t\t$width : $column-width * ($columns / $name-multiplicator);\n\t\t} @else {\n\t\t\t$width : percentage(1 / $context) * ($columns / $name-multiplicator);\n\t\t}\n\n\t\t// set value :\n\t\t@if $direction == rtl { margin-right:$width; }\n\t\t@else { margin-left:$width; }\n\t\t// handle direction attribute\n\t\t@if g-get-state-var(dir-attribute) {\n\t\t\t[dir=\"rtl\"] & {\n\t\t\t\tmargin-right: $width;\n\t\t\t}\n\t\t\t[dir=\"ltr\"] & {\n\t\t\t\tmargin-left: $width;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n@mixin _g-common-suffix(\n\t$state : default\n) {\n\t@if g-get-state-var(dir-attribute, $state) {\n\t\t[dir=\"rtl\"] & {\n\t\t\tmargin-right: auto;\n\t\t}\n\t\t[dir=\"ltr\"] & {\n\t\t\tmargin-left: auto;\n\t\t}\n\t}\n}\n/**\n * Set the suffix count for the column\n * @param \t\t{Integer} \t\t$columns \t\t\tThe number of columns to suffix this column\n * @param \t\t{Integer} \t\t[$context=null]  \tThe context on which to calculate the suffix value. By default, it is the default context setted with ```g-setup```.\n * @example \tscss\n * .my-cool-column {\n * \t\\@include g-suffix(2);\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-suffix(\n\t$columns,\n\t$context : null\n) {\n\t@include _g-call(suffix) {\n\t\t// vars :\n\t\t@if type-of($context) != number {\n\t\t\t$context : g-get-state-var(context);\n\t\t}\n\t\t$direction : g-get-state-var(direction);\n\t\t$name-multiplicator : g-get-state-var(name-multiplicator);\n\t\t$column-width : g-get-state-var(column-width);\n\n\t\t// vars :\n\t\t$width : 0;\n\t\t@if $column-width {\n\t\t\t$width : $column-width * ($columns / $name-multiplicator);\n\t\t} @else {\n\t\t\t$width : percentage(1 / $context) * ($columns / $name-multiplicator);\n\t\t}\n\n\t\t// set value :\n\t\t@if $direction == rtl { margin-left:$width; }\n\t\t@else { margin-right:$width; }\n\n\t\t// handle direction attribute\n\t\t@if g-get-state-var(dir-attribute) {\n\t\t\t[dir=\"rtl\"] & {\n\t\t\t\tmargin-left: $width;\n\t\t\t}\n\t\t\t[dir=\"ltr\"] & {\n\t\t\t\tmargin-right: $width;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n//\n// Row debug\n//\n@mixin _g-common-row-debug(\n\t$state : default\n) {\n}\n/**\n * Display a debug grid on top of the row\n * @example \tscss\n * .my-row {\n * \t\\@include g-row-debug();\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-row-debug() {\n\t@include _g-call(row-debug) {\n\t\t// variables :\n\t\t$context : g-get-state-var(context);\n\n\t\tposition:relative;\n\t\tz-index:99999;\n\t\toverflow:hidden;\n\n\t\t&:before {\n\t\t\tpointer-events: none;\n\t\t\tcontent:'';\n\t\t\tposition:absolute;\n\t\t\ttop:0; left:0;\n\t\t\twidth:100%; height:99999px;\n\t\t\t// vars :\n\t\t\t$width : percentage(1 / $context);\n\t\t\tbackground: linear-gradient(to right, rgba(0,0,0,0) 50% , rgba(0,0,0,.02) 50%); // Standard syntax\n\t\t\tbackground-size:($width*2) 100%;\n\t\t\tz-index:99999;\n\t\t}\n\t}\n}\n\n\n@mixin _g-common-container(\n\t$state : default\n) {\n\t&:after {\n\t\tcontent: \"\";\n\t\tdisplay: table;\n\t\tclear: both;\n\t}\n\n}\n/**\n * Make the element a grid container\n * @example \tscss\n * .my-cool-container {\n * \t\\@include g-container();\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-container(\n) {\n\t@include _g-call(container) {\n\t}\n}\n\n\n//\n// Row no gutter\n//\n@mixin _g-common-row-no-gutter(\n\t$state : default\n) {\n}\n\n/**\n * Remove the gutters on each columns inside the row\n * @param \t\t{String|List<String>} \t\t[$sides=top right bottom left] \t\tThe sides to clear\n * @example \tscss\n * .my-cool-row {\n * \t\\@include g-row-no-gutter(left right);\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-row-no-gutter(\n\t$sides : top right bottom left\n) {\n\t@include _g-call(row-no-gutter) {\n\t\tmargin-left: 0;\n\t\tmargin-right: 0;\n\n\t\t> #{_g-get-generic-selector('grid')} {\n\t\t\t@include g-no-gutter($sides);\n\t\t}\n\t}\n}\n\n\n@mixin _g-common-grid-centered(\n\t$state : default\n) {\n\tdisplay:block !important;\n\tfloat:none !important;\n\tmargin-left:auto !important;\n\tmargin-right:auto !important;\n\tclear:both !important;\n}\n/**\n * Make a column centered\n * @example \tscss\n * .my-cool-column {\n * \t\\@include g-grid-centered();\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-grid-centered(\n) {\n\t@include _g-call(grid-centered) {\n\t}\n}\n\n\n@mixin _g-common-hide(\n\t$state : default\n) {\n}\n/**\n * Hide an element\n * @example \tscss\n * .my-cool-element {\n * \t\\@include g-hide();\n * }\n *\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-hide(\n) {\n\t@include _g-call(hide) {\n\t\tdisplay:none !important;\n\t}\n}\n\n\n//\n// Not visible on\n//\n@mixin _g-common-not-visible(\n\t$state : default\n) {\n}\n/**\n * Set the visibility of an element to hidden\n * @example \tscss\n * .my-cool-element {\n * \t\\@include g-not-visible();\n * }\n *\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-not-visible(\n) {\n\t@include _g-call(not-visible) {\n\t\tvisibility:hidden;\n\t}\n}\n/**\n * Set the visibility of an element to hidden\n * @example \tscss\n * .my-cool-element {\n * \t\\@include g-invisible();\n * }\n *\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-invisible(\n) {\n\t@include _g-call(not-visible) {\n\t\tvisibility:hidden;\n\t}\n}\n\n\n@mixin _g-common-show(\n\t$state : default\n) {\n}\n/**\n * Set the display of an element to block\n * @example \tscss\n * .my-cool-element {\n * \t\\@include g-show();\n * }\n *\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-show(\n) {\n\t@include _g-call(show) {\n\t\tdisplay:block !important;\n\t}\n}\n\n\n@mixin _g-common-show-inline(\n\t$state : default\n) {\n}\n/**\n * Set the display of an element to inline-block\n * @example \tscss\n * .my-cool-element {\n * \t\\@include g-show();\n * }\n *\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-show-inline(\n) {\n\t@include _g-call(show-inline) {\n\t\tdisplay:inline-block !important;\n\t}\n}\n\n\n@mixin _g-common-visible(\n\t$state : default\n) {\n}\n/**\n * Set the visibility of an element to visible\n * @example \tscss\n * .my-cool-element {\n * \t\\@include g-show();\n * }\n *\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-visible(\n) {\n\t@include _g-call(visible) {\n\t\tvisibility:visible;\n\t}\n}\n\n\n@mixin _g-common-float(\n\t$state : default\n) {\n}\n/**\n * Set the float property of the element to the specified direction\n * @param \t\t{String} \t\t[$float=left] \t\tThe float direction to set\n * @example \tscss\n * .my-cool-element {\n * \t\\@include g-float(right);\n * }\n *\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-float(\n\t$float-direction : left\n) {\n\t@include _g-call(float) {\n\t\tfloat:#{$float-direction};\n\t}\n}\n\n\n@mixin _g-common-clear(\n\t$state : default\n) {\n}\n/**\n * Clear the float property of the element to the specified direction\n * @param \t\t{String} \t\t[$float=left] \t\tThe float direction to clear\n * @example \tscss\n * .my-cool-element {\n * \t\\@include g-clear(right);\n * }\n *\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-clear(\n\t$clear-direction : both\n) {\n\t@include _g-call(clear) {\n\t\tclear:#{$clear-direction};\n\t}\n}\n\n\n@mixin _g-common-no-gutter(\n\t$state : default\n) {\n}\n/**\n * Remove the gutters on the column\n * @param \t\t{String|List<String>} \t\t[$sides=top right bottom left] \t\tThe sides to clear\n * @example \tscss\n * .my-cool-column {\n * \t\\@include g-no-gutter(left right);\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-no-gutter(\n\t$side : top right bottom left\n) {\n\t@include _g-call(no-gutter) {\n\t\t@each $s in $side {\n\t\t\tpadding-#{$s} : 0;\n\t\t}\n\t}\n}\n\n\n@mixin _g-common-gutter(\n\t$state : default\n) {\n}\n/**\n * Set the gutters on the column\n * @param \t\t{String|List<String>} \t\t[$sides=top right bottom left] \t\tThe sides to apply gutters on\n * @example \tscss\n * .my-cool-column {\n * \t\\@include g-gutter(left right);\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-gutter(\n\t$side-or-size : right left\n) {\n\t@include _g-call(gutter) {\n\n\t\t// get a gutter map\n\t\t$gutters : _g-forge-gutters-map($side-or-size);\n\n\t\t// check that we have a gutter map\n\t\t@each $side, $value in $gutters {\n\t\t\t@if $value and $value > 0 {\n\t\t\t\tpadding-#{$side} : $value;\n\t\t\t}\n\t\t}\n\n\t}\n}\n","// |------------------------------------------------------\n// |------------------------------------------------------\n// | Generate mixins\n// |------------------------------------------------------\n// |------------------------------------------------------\n\n/**\n * @name \tGenerate mixins\n * This are all the mixins that you can use to generate classes to use inside your HTML codebase\n */\n\n/**\n * Generate a custom class for all the states\n * @param \t{List} \t$pattern \t\t\t\t\tThe name pattern of the class\n * @param \t{List} \t[$statesNames=null] \t\tThe states names to generate. If null or all, will generate the class for all registered states\n * @example \tscss\n * \\@include g-generate-custom-class(('my','-','cool','-','class','-','%state')) {\n * \tcolor: pink;\n * \tpadding: g-get-state-var(gutter-left);\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-custom-class(\n\t$pattern,\n\t$statesNames : null,\n\t$replacements...\n) {\n\t// manage states to generate :\n\t$states : ();\n\t@if $statesNames == null or $statesNames == all {\n\t\t// loop on each states to generate names list :\n\t\t@each $stateName, $state in $_g-states {\n\t\t\t$states : append($states, $stateName);\n\t\t}\n\t} @else {\n\t\t$states : $statesNames;\n\t}\n\n\t// Get all pattern\n\t$unmatched_patterns :  _g-unmatched-patterns($pattern);\n\t$matched_patterns :  _g-matched-patterns($pattern);\n\n    // Adjust the replacement list length to be the same as unmatched_patterns\n    @while length( $unmatched_patterns ) != length( $replacements ) {\n        @if length( $unmatched_patterns ) < length( $replacements ) {\n            $replacements : list-pop($replacements);\n        }@else{\n            $replacements : append($replacements, (null));\n        }\n    }\n\n    // for each valid pattern, get replacement list\n    @each $index, $pattern in $matched_patterns {\n        @if $pattern == \"%state\" {\n            $matched_patterns : map-remove($matched_patterns, $index);\n        }@else{\n            $replacements : append($replacements, _g-get-pattern-values(str-slice($pattern, 2)));\n        }\n    }\n\n    $found_patterns : map-merge($unmatched_patterns, $matched_patterns);\n\n\t// loop on each states :\n\t@each $stateName in $states\n\t{\n\t\t// manage statename :\n\t\t@if type-of($stateName) != string {\n\t\t\t$stateName : map-get($stateName, name);\n\t\t}\n\n\t\t// classes :\n\t\t$classes : g-get-state-var(classes, $stateName);\n\n\t\t// genrate the classname :\n\t\t@if $classes\n\t\t{\n\t\t\t@include g-state($stateName, false) {\n\t\t\t\t$length_a:length($found_patterns);\n\t\t\t\t$length_b:length($replacements);\n\t\t\t\t@if $length_a > 0 and $length_a <= $length_b {\n\t\t\t\t\t$list_indexes : ();\n\t\t\t\t\t@for $i from 1 through $length_a {\n\t\t\t\t\t\t$list_indexes : append($list_indexes, 1);\n\t\t\t\t\t}\n\n\t\t\t\t\t@while nth($list_indexes, 1) <= length( nth($replacements, 1) ){\n\t\t\t\t\t\t$g-scope : () !global;\n\t\t\t\t\t\t$replacement_pattern : $pattern;\n\t\t\t\t\t\t$replaced_count : 0;\n\n\t\t\t\t\t\t// Work the replacement\n\t\t\t\t\t\t@each $index, $flag in $found_patterns {\n\t\t\t\t\t\t\t$replaced_count : $replaced_count + 1;\n\n\t\t\t\t\t\t\t$current_replacement : nth( $replacements, $replaced_count );\n\t\t\t\t\t\t\t$current_index : nth($list_indexes, $replaced_count);\n\n\t\t\t\t\t\t\t$replacement_pattern : set-nth( $replacement_pattern, $index, nth( $current_replacement, $current_index ) );\n\n\t\t\t\t\t\t\t$var_name : str-slice($flag, 2);\n\n\t\t\t\t\t\t\t$g-scope : map-set( $g-scope, $var_name, nth( $current_replacement, $current_index ) ) !global;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t#{_g-selector($replacement_pattern, $stateName)} {\n\t\t\t\t\t\t\t@content;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$g-scope : () !global;\n\n\t\t\t\t\t\t// Add 1 to indexes\n\t\t\t\t\t\t$break : false;\n\t\t\t\t\t\t$current_iteration_index : length( $list_indexes ); // The last index\n\t\t\t\t\t\t@while $break == false {\n\t\t\t\t\t\t\t$list_indexes : set-nth( $list_indexes, $current_iteration_index, nth( $list_indexes, $current_iteration_index ) + 1 );\n\n\t\t\t\t\t\t\t@if nth( $list_indexes, $current_iteration_index ) > length( nth( $replacements, $current_iteration_index ) )\n\t\t\t\t\t\t\t\tand $current_iteration_index != 1 {\n\t\t\t\t\t\t\t\t$list_indexes : set-nth( $list_indexes, $current_iteration_index, 1);\n\n\t\t\t\t\t\t\t\t$current_iteration_index : $current_iteration_index - 1;\n\t\t\t\t\t\t\t}@else{\n\t\t\t\t\t\t\t\t$break : true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}@else{\n\t\t\t\t\t#{_g-selector($pattern, $stateName)} {\n\t\t\t\t\t\t@content;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n@mixin _g-generate-helper-classes (\n\t$state : null,\n\t$package : null\n) {\n\t// helpers :\n\t@if _g-need-to-generate(float, $package) {\n\t\t#{_g-selector(float, $state, left)} {\n\t\t\t@include g-float(left);\n\t\t}\n\t\t#{_g-selector(float, $state, right)} {\n\t\t\t@include g-float(right);\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(clear, $package) {\n\t\t#{_g-selector(clear, $state)} {\n\t\t\t@include g-clear(both);\n\t\t}\n\t\t#{_g-selector(clear, $state, left)} {\n\t\t\t@include g-clear(left);\n\t\t}\n\t\t#{_g-selector(clear, $state, right)} {\n\t\t\t@include g-clear(right);\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(auto-height, $package) {\n\t\t#{_g-selector(auto-height, $state)} {\n\t\t\theight:inherit;\n\t\t\tmin-height:inherit;\n\t\t\tmax-height:inherit;\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(grid-centered, $package) {\n\t\t#{_g-selector(grid-centered, $state)} {\n\t\t\t@include g-grid-centered();\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(container, $package) {\n\t\t#{_g-selector(container, $state)} {\n\t\t\t@include g-container();\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(row, $package) {\n\t\t#{_g-selector(row, $state)} {\n\t\t\t@include g-row(false);\n\t\t}\n\t\t#{_g-selector(row, $state, reverse)} {\n\t\t\t@include g-row(true);\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(row-full, $package) {\n\t\t#{_g-selector(row-full, $state)} {\n\t\t\t@include g-row-full();\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(col, $package) {\n\t\t#{_g-selector(col, $state)} {\n\t\t\t@include g-col(false);\n\t\t}\n\t\t#{_g-selector(col, $state, reverse)} {\n\t\t\t@include g-col(true);\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(grid-table, $package) {\n\t\t#{_g-selector(grid-table, $state)} {\n\t\t\t@include g-grid-table();\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(grid-adapt, $package) {\n\t\t#{_g-selector(grid-adapt, $state)} {\n\t\t\t@include g-grid-adapt();\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(grid-grow, $package) {\n\t\t#{_g-selector(grid-grow, $state)} {\n\t\t\t@include g-grid-grow();\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(row-no-gutter, $package) {\n\t\t#{_g-selector(row-no-gutter, $state)} {\n\t\t\t@include g-row-no-gutter();\n\t\t}\n\t\t#{_g-selector(row-no-gutter, $state, top)} {\n\t\t\t@include g-row-no-gutter(top);\n\t\t}\n\t\t#{_g-selector(row-no-gutter, $state, right)} {\n\t\t\t@include g-row-no-gutter(right);\n\t\t}\n\t\t#{_g-selector(row-no-gutter, $state, bottom)} {\n\t\t\t@include g-row-no-gutter(bottom);\n\t\t}\n\t\t#{_g-selector(row-no-gutter, $state, left)} {\n\t\t\t@include g-row-no-gutter(left);\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(row-align, $package) {\n\t\t#{_g-selector(row-align, $state, left)} {\n\t\t\t@include g-row-align(left);\n\t\t}\n\t\t#{_g-selector(row-align, $state, center)} {\n\t\t\t@include g-row-align(center);\n\t\t}\n\t\t#{_g-selector(row-align, $state, right)} {\n\t\t\t@include g-row-align(right);\n\t\t}\n\t\t#{_g-selector(row-align, $state, middle)} {\n\t\t\t@include g-row-align(middle);\n\t\t}\n\t\t#{_g-selector(row-align, $state, top)} {\n\t\t\t@include g-row-align(top);\n\t\t}\n\t\t#{_g-selector(row-align, $state, bottom)} {\n\t\t\t@include g-row-align(bottom);\n\t\t}\n\t\t@if g-is-driver(flex) {\n\t\t\t#{_g-selector(row-align, $state, around)} {\n\t\t\t\t@include g-row-align(around);\n\t\t\t}\n\t\t\t#{_g-selector(row-align, $state, between)} {\n\t\t\t\t@include g-row-align(between);\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t// Gutters\n\t//\n\t@if _g-need-to-generate(no-gutter, $package) {\n\t\t#{_g-selector(no-gutter, $state)} {\n\t\t\t@include g-no-gutter();\n\t\t}\n\t\t#{_g-selector(no-gutter, $state, left)} {\n\t\t\t@include g-no-gutter(left);\n\t\t}\n\t\t#{_g-selector(no-gutter, $state, right)} {\n\t\t\t@include g-no-gutter(right);\n\t\t}\n\t\t#{_g-selector(no-gutter, $state, top)} {\n\t\t\t@include g-no-gutter(top);\n\t\t}\n\t\t#{_g-selector(no-gutter, $state, bottom)} {\n\t\t\t@include g-no-gutter(bottom);\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(gutter, $package) {\n\t\t#{_g-selector(gutter, $state)} {\n\t\t\t@include g-gutter(top right bottom left);\n\t\t}\n\t\t#{_g-selector(gutter, $state, left)} {\n\t\t\t@include g-gutter(left);\n\t\t}\n\t\t#{_g-selector(gutter, $state, right)} {\n\t\t\t@include g-gutter(right);\n\t\t}\n\t\t#{_g-selector(gutter, $state, top)} {\n\t\t\t@include g-gutter(top);\n\t\t}\n\t\t#{_g-selector(gutter, $state, bottom)} {\n\t\t\t@include g-gutter(bottom);\n\t\t}\n\t}\n\n\t//\n\t// Wrapping\n\t//\n\t@if _g-need-to-generate(nowrap, $package) {\n\t\t#{_g-selector(nowrap, $state)} {\n\t\t\t@include g-nowrap();\n\t\t}\n\t}\n\t@if _g-need-to-generate(wrap, $package) {\n\t\t#{_g-selector(wrap, $state)} {\n\t\t\t@include g-wrap();\n\t\t}\n\t}\n\n\t//\n\t// Visible, hide, etc...\n\t//\n\t@if _g-need-to-generate(hide, $package) {\n\t\t#{_g-selector(hide, $state)} {\n\t\t\t@include g-hide();\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(not-visible, $package) {\n\t\t#{_g-selector(not-visible, $state)} {\n\t\t\t@include g-not-visible();\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(show, $package) {\n\t\t#{_g-selector(show, $state)} {\n\t\t\t@include g-show();\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(show-inline, $package) {\n\t\t#{_g-selector(show-inline, $state)} {\n\t\t\t@include g-show-inline();\n\t\t}\n\t}\n\n\t@if _g-need-to-generate(visible, $package) {\n\t\t#{_g-selector(visible, $state)} {\n\t\t\t@include g-visible();\n\t\t}\n\t}\n\n\t//\n\t// Clear each class :\n\t//\n\t@if _g-need-to-generate(clear-each, $package) {\n\t\t@each $clearName, $clearMap in $_g-clear-classes {\n\t\t\t// get count :\n\t\t\t$clearCount : map-get($clearMap, clearEach);\n\t\t\t// what to clear :\n\t\t\t$clearWhat : map-get($clearMap, clearWhat);\n\t\t\t// generate the class :\n\t\t\t#{_g-selector(clear-each, $state, $clearCount)} {\n\t\t\t\t@include g-clear-each($clearCount, $clearWhat);\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t// debug\n\t//\n\t@if _g-need-to-generate(row-debug, $package) {\n\t\t#{_g-selector(row-debug, $state)} {\n\t\t\t@include g-row-debug();\n\t\t}\n\t}\n}\n\n\n//\n// Generate json settings\n//\n@mixin g-generate-json-settings() {\n\n\t// settings content :\n\t$gridle-settings-states : \"{\";\n\n\t// generate all classes for differents media queries :\n\t$statesCount : length($_g-states);\n\t$i : 0;\n\t@each $stateName, $state in $_g-states {\n\n\t\t$name : $stateName;\n\n\t\t$gridle-settings-states : \"#{$gridle-settings-states} \\\"#{$name}\\\":{\";\n\n\t\t@each $varName, $var in $state {\n\n\t\t\t$value : null;\n\t\t\t@if $varName == \"query\" {\n\t\t\t\t$value : g-get-media-query($stateName);\n\t\t\t} @else {\n\t\t\t\t$value : map-get($state,$varName);\n\t\t\t}\n\n\t\t\t@if $value == null {\n\t\t\t\t$gridle-settings-states : \"#{$gridle-settings-states} \\\"#{$varName}\\\" : null,\";\n\t\t\t} @elseif type-of($value) == bool {\n\t\t\t\t$gridle-settings-states : \"#{$gridle-settings-states} \\\"#{$varName}\\\" : #{$value},\";\n\t\t\t} @elseif type-of($value) == map {\n\t\t\t\t$gridle-settings-states : \"#{$gridle-settings-states} \\\"#{$varName}\\\" : {\";\n\t\t\t\t@each $vn, $vv in $value {\n\t\t\t\t\t$gridle-settings-states : \"#{$gridle-settings-states} \\\"#{$vn}\\\" : \\\"#{$vv}\\\",\"\n\t\t\t\t}\n\t\t\t\t$gridle-settings-states : \"#{$gridle-settings-states} \\\"_\\\" : true\";\n\t\t\t\t$gridle-settings-states : \"#{$gridle-settings-states} },\";\n\t\t\t} @else {\n\t\t\t\t$gridle-settings-states : \"#{$gridle-settings-states} \\\"#{$varName}\\\" : \\\"#{$value}\\\",\";\n\t\t\t}\n\t\t}\n\n\t\t$gridle-settings-states : \"#{$gridle-settings-states} \\\"_\\\" : true\";\n\n\t\t@if $i >= $statesCount - 1 {\n\t\t\t$gridle-settings-states : \"#{$gridle-settings-states} }\";\n\t\t} @else {\n\t\t\t$gridle-settings-states : \"#{$gridle-settings-states} },\";\n\t\t}\n\n\t\t// update i :\n\t\t$i : $i + 1;\n\n\t}\n\n\t // generate settings json :\n\t$gridle-settings-states : \"#{$gridle-settings-states}}\";\n\t$gridle-settings : \"{\";\n\t$gridle-settings : \"#{$gridle-settings} \\\"version\\\" : \\\"#{$_g-version}\\\"\";\n\n\t// states :\n\t$gridle-settings : \"#{$gridle-settings}, \\\"states\\\" : #{$gridle-settings-states}\";\n\n\t// settings :\n\t$gridle-settings : \"#{$gridle-settings} }\";\n\t#gridle-settings {\n\t\tcontent : $gridle-settings;\n\t}\n}\n\n\n/**\n * Generate all the classes depending on the packages you have specified like:\n * - ```.container@{state}``` : default container\n * - ```.row@{state}``` : default row\n * - ```.row-align-{align}@{state}``` : default row-align\n * - ```.row-full@{state}``` : default row-full\n * - ```.row-debug@{state}``` : default row-debug\n * - ```.row-no-gutter@{state}``` : default row-no-gutter\n * - ```.nowrap@{state}``` : default nowrap\n * - ```.wrap@{state}``` : default wrap\n * - ```.col@{state}``` : default col\n * - ```.gr-{column}@{state}``` : default grid\n * - ```.gr-table@{state}``` : default gr-table\n * - ```.gr-grow@{state}``` : default gr-grow\n * - ```.gr-adapt@{state}``` : default gr-adapt\n * - ```.gr-centered@{state}``` : default gr-centered\n * - ```.push@{state}``` : default push\n * - ```.pull@{state}``` : default pull\n * - ```.prefix@{state}``` : default prefix\n * - ```.suffix@{state}``` : default suffix\n * - ```.hide@{state}``` : helpers hide\n * - ```.show@{state}``` : helpers show\n * - ```.show-inline@{state}``` : helpers show-inline\n * - ```.not-visible@{state}``` : helpers not-visible\n * - ```.visible@{state}``` : helpers visible\n * - ```.float-{%float}@{state}``` : helpers float\n * - ```.clear-{%float}@{state}``` : helpers clear\n * - ```.clear-each-{%count}@{state}``` : helpers clear-each\n * - ```.gutter-{%side}@{state}``` : helpers gutter\n * - ```.no-gutter-{%side}@{state}``` : helpers no-gutter\n * - ```.auto-height@{state}``` : helpers auto-height\n * - ```.order-{%column-count}@{state}``` : helpers order\n *\n * @param \t\t{String|List<String>} \t\t[$states=all] \t\tThe states to generate the classes for\n * @param \t\t{String|List<String>} \t\t[$package=all] \t\tThe packages to generate the classes for\n * @param \t\t{String} \t\t\t\t\t[$scope=null] \t\tA classname to scope the classes in\n *\n * @example \tscss\n * // generate all the classes\n * \\@include g-classes();\n * // generate only certain states\n * \\@include g-classes(mobile tablet);\n * // generate only the helpers for all the states\n * \\@include g-classes(all, helpers);\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-classes(\n\t$states : all,\n\t$package : all,\n\t$scope : null\n) {\n\n\t// init gridle\n\t@include g-init();\n\n\t// check if a scope exist\n\t@if $scope {\n\t\t// wrapp grid into scope\n\t\t.#{$scope} {\n\t\t\t@include _g-classes($states, $package, true);\n\t\t}\n\t} @else {\n\t\t// generate classes\n\t\t@include _g-classes($states, $package, false);\n\t}\n}\n$_gridle_generateOnlyOnce : true !default; // keep track of generate once classes\n@mixin _g-classes(\n\t$states : all,\n\t$package : all,\n\t$has-parent : false\n) {\n\t// set that we are in generate phase (that can be used anywhere)\n\t$_g-is-in-generate-phase : true !global;\n\n\t// get all the registered states that will be processed after\n\t// to determine which states to generate\n\t$generate-states : g-get-states-names();\n\n\t// if we have provided some states to generate\n\t@if $states != null and $states != all {\n\t\t// check if we have only some - in the states list\n\t\t// mean that we want to only remove these specified states\n\t\t// from the all states list\n\t\t$onlyRemove : true;\n\t\t@each $stateName in $states {\n\t\t\t@if str-slice($stateName,1,1) != '-' {\n\t\t\t\t$onlyRemove : false;\n\t\t\t}\n\t\t}\n\t\t// if we want to only remove some states\n\t\t@if $onlyRemove {\n\t\t\t// loop on all the states to remove\n\t\t\t@each $stateName in $states {\n\t\t\t\t$sn : str-slice($stateName,2);\n\t\t\t\t$idx : index($generate-states, $sn);\n\t\t\t\t@if $idx != null {\n\t\t\t\t\t$generate-states : remove-nth($generate-states,$idx);\n\t\t\t\t}\n\t\t\t}\n\t\t} @else {\n\t\t\t$generate-states : $states;\n\t\t}\n\t}\n\n\n\t// generate these classes only once\n\t@if $_gridle_generateOnlyOnce\n\t{\n\n\t\t// update status\n\t\t$_gridle_generateOnlyOnce : false !global;\n\n\t\t// | ------------------------\n\t\t// | Windows 8 fix\n\t\t// | ------------------------\n\n\t\t// Windows 8 fix for snap mode\n\t\t@media screen and (max-width: 400px) {\n\t\t\t@-ms-viewport { width: device-width; }\n\t\t}\n\n\t\t// | ------------------------\n\t\t// | JSON Settings\n\t\t// | ------------------------\n\n\t\t// generate json settings\n\t\t@if $gridle-generate-json-settings\n\t\t{\n\t\t\t@include g-generate-json-settings();\n\t\t}\n\n\t}\n\n\t// create the columns styleguide html\n\t$styleguideColumns : ();\n\t@each $columnName, $column in g-get-columns(default) {\n\t\t@if $columnName != '0' {\n\t\t\t$row : '<div class=\"gridle-styleguide #{_g-classname(row)} #{_g-classname(row-debug)}\"><div class=\"gridle-styleguide #{_g-classname(grid, default, $columnName)}\">#{_g-selector(grid, default, $columnName)}</div></div>';\n\t\t\t$styleguideColumns : append($styleguideColumns, $row);\n\t\t}\n\t}\n\n\t/**\n\t * @name \tColumns\n\t * Grid columns available\n\t * @styleguide \tGridle / Columns\n\t * @example \thtml\n\t * <style>\n\t * #{_g-selector(row)}.gridle-styleguide {\n\t * \tmargin-bottom: #{g-get-state-var(gutter-width)};\n\t * }\n\t * #{_g-get-generic-selector(grid)}.gridle-styleguide {\n\t * \tbackground:#eee;\n\t * \tpadding:#{g-get-state-var(gutter-width)};\n\t * }\n\t * </style>\n\t * <div class=\"gridle-styleguide #{_g-selector(container)}\">\n\t *  #{$styleguideColumns}\n\t * </div>\n\t */\n\n\t// loop on each states to generate all the classes\n\t@each $stateName in $generate-states {\n\n\t\t// get the actual state\n\t\t$state : g-get-state($stateName);\n\t\t$classes : g-get-state-var(classes, $state);\n\n\t\t// stop here if no classes wanted\n\t\t@if $classes {\n\n\t\t\t// debug\n\t\t\t// @debug(\"Generate classes for state #{$stateName}\");\n\n\t\t\t// scope all the classes in a media query\n\t\t\t@include g-state($state, false) {\n\n\t\t\t\t// generate all classes for columns\n\t\t\t\t$i : 0;\n\t\t\t\t@each $columnName, $column in g-get-columns($state) {\n\n\t\t\t\t\t// variables\n\t\t\t\t\t$columnsCount : map-get($column, columns);\n\t\t\t\t\t$columnsContext : map-get($column, context);\n\t\t\t\t\t$columnsNameMultiplicator : map-get($column, name-multiplicator);\n\n\t\t\t\t\t// extend context in state (for columns)\n\t\t\t\t\t$extendedState : map-merge($state, (\n\t\t\t\t\t\tcontext : $columnsContext,\n\t\t\t\t\t\tname-multiplicator : $columnsNameMultiplicator // inject the name multiplicator here getted from column to handle custom registered columns\n\t\t\t\t\t));\n\n\t\t\t\t\t// classes\n\t\t\t\t\t@if _g-need-to-generate(grid, $package) {\n\t\t\t\t\t\t#{_g-selector(grid, $stateName, $columnName)} {\n\t\t\t\t\t\t\t@include g-grid($columnsCount, $columnsContext);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t@if _g-need-to-generate(push, $package) {\n\t\t\t\t\t\t#{_g-selector(push, $stateName, $columnName)} {\n\t\t\t\t\t\t\t@include g-push($columnsCount, $columnsContext);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t@if _g-need-to-generate(pull, $package) {\n\t\t\t\t\t\t#{_g-selector(pull, $stateName, $columnName)} {\n\t\t\t\t\t\t\t@include g-pull($columnsCount, $columnsContext);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t@if _g-need-to-generate(prefix, $package) {\n\t\t\t\t\t\t#{_g-selector(prefix, $stateName, $columnName)} {\n\t\t\t\t\t\t\t@include g-prefix($columnsCount, $columnsContext);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t@if _g-need-to-generate(suffix, $package) {\n\t\t\t\t\t\t#{_g-selector(suffix, $stateName, $columnName)} {\n\t\t\t\t\t\t\t@include g-suffix($columnsCount, $columnsContext);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t@if _g-need-to-generate(order, $package) {\n\t\t\t\t\t\t#{_g-selector(order, $stateName, first)} {\n\t\t\t\t\t\t\t@include g-order(-1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#{_g-selector(order, $stateName, $i)} {\n\t\t\t\t\t\t\t@include g-order($i);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#{_g-selector(order, $stateName, last)} {\n\t\t\t\t\t\t\t@include g-order(9999);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// up $i\n\t\t\t\t\t$i : $i + 1;\n\t\t\t\t}\n\n\t\t\t\t// handle direction on body\n\t\t\t\tbody {\n\t\t\t\t\tdirection: g-get-state-var(direction);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// apply css for states of each elements\n\t@each $map in $_g-apply-css-for {\n\t\t@each $stateName, $fors in $map {\n\t\t\t@include _g-state($stateName, false) {\n\t\t\t\t@each $f, $rules in $fors {\n\t\t\t\t\t@if map-get($fors, $f) {\n\t\t\t\t\t\t@if _g-need-to-generate($f, $package) {\n\t\t\t\t\t\t\t@include g-selector($f, null) {\n\t\t\t\t\t\t\t\t@include _g-map-2-css($rules);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// loop on each states to generate all the classes\n\t@each $stateName in $generate-states {\n\n\t\t// get the actual state\n\t\t$state : g-get-state($stateName);\n\t\t$classes : g-get-state-var(classes, $state);\n\n\t\t// stop here if no classes wanted\n\t\t@if $classes {\n\n\t\t\t// debug\n\t\t\t// @debug(\"Generate classes for state #{$stateName}\");\n\n\t\t\t// scope all the classes in a media query\n\t\t\t@include g-state($state, false) {\n\n\t\t\t\t// media queries helpers classes\n\t\t\t\t@include _g-generate-helper-classes($stateName, $package);\n\t\t\t}\n\t\t}\n\t}\n\n\t// make nested grids working automatically\n\t@if _g-need-to-generate(col, $package) or _g-need-to-generate(row, $package) {\n\t\t@each $stateName, $state in g-get-states() {\n\t\t\t$classes : g-get-state-var(classes, $state);\n\t\t\t@if $classes {\n\t\t\t\t$gutter-left : g-get-state-var(gutter-left, $state);\n\t\t\t\t$gutter-right : g-get-state-var(gutter-right, $state);\n\t\t\t\t@include _g-state($stateName, false) {\n\t\t\t\t\t#{_g-get-generic-selector(grid)} > [class^=\"#{str-slice(_g-selector(row),2)}\"],\n\t\t\t\t\t#{_g-get-generic-selector(grid)} > [class^=\"#{str-slice(_g-selector(col),2)}\"] {\n\t\t\t\t\t\tmargin-left: -#{$gutter-left};\n\t\t\t\t\t\tmargin-right: -#{$gutter-right};\n\t\t\t\t\t}\n\t\t\t\t\t// [class*=\"#{str-slice(_g-selector(grid),2)}\"] > [class^=\"#{str-slice(_g-selector(row),2)}\"],\n\t\t\t\t\t// [class*=\"#{str-slice(_g-selector(grid),2)}\"] > [class^=\"#{str-slice(_g-selector(col),2)}\"] {\n\t\t\t\t\t// \tmargin-left: -#{$gutter-left};\n\t\t\t\t\t// \tmargin-right: -#{$gutter-right};\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// reset the variable that track if we are in generate phase or not\n\t$_g-is-in-generate-phase : false !global;\n}\n","/**\n * @name \tDefault driver API\n * This are all the API mixins that are exposed by gridle for the default driver.\n */\n\n@mixin _g-common-row(\n\t$state : default\n) {\n\t// inherit the height\n\t// height: inherit;\n\t// min-height: inherit;\n\t// max-height: inherit;\n\t// For modern browser\n\t&:before,\n\t&:after {\n\t\tcontent:\"\";\n\t\tdisplay:table;\n\t}\n\t&:after {\n\t\tclear:both;\n\t}\n\t// For IE 6/7 (trigger hasLayout\n\t& {\n\t   zoom:1;\n\t}\n}\n/**\n * Set the element as a row\n * @param \t\t{Boolean} \t\t[$reverse=false] \t\tRevert the columns order if true\n * @example \tscss\n * .my-cool-row {\n * \t\\@include g-row();\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-row(\n\t$reverse : false\n) {\n\t@include _g-call(row) {\n\t\tpadding-left: 0 !important;\n\t\tpadding-right: 0 !important;\n\t\tmargin-left: -#{g-get-state-var(gutter-left)};\n\t\tmargin-right: -#{g-get-state-var(gutter-right)};\n\t\t// font-size:0; // to avoid problems with inline-block margins\n\n\t\t@if $reverse {\n\t\t\ttransform : rotateY(180deg);\n\n\t\t\t> #{_g-get-generic-selector(grid)} {\n\t\t\t\ttransform : rotateY(-180deg);\n\t\t\t}\n\t\t}\n\n\t\t#{_g-get-generic-selector(no-gutter)} > & {\n\t\t\tmargin-left: 0 !important;\n\t\t\tmargin-right: 0 !important;\n\t\t}\n\n\t\t// do this only when not in generate phase\n\t\t// mean that we use the mixin directly\n\t\t@if _g-is-in-generate-phase() == false {\n\t\t\t@each $stateName, $state in g-get-states() {\n\t\t\t\t@include g-state($state) {\n\t\t\t\t\t& #{str-replace(unquote(\"#{&}\"),\".state-#{g-get-state-var(name, $state)}\",\"\")} {\n\t\t\t\t\t\tmargin-left: -#{g-get-state-var(gutter-left, $state)};\n\t\t\t\t\t\tmargin-right: -#{g-get-state-var(gutter-right, $state)};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n@mixin _g-common-nowrapcol(\n\t$state : default\n) {\n}\n/**\n * Set the element as a col\n * @param \t\t{Boolean} \t\t[$reverse=false] \t\tRevert the columns order if true\n * @example \tscss\n * .my-cool-col {\n * \t\\@include g-col();\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-col(\n\t$reverse : false\n) {\n\t@include _g-call(col) {\n\t\tpadding-left: 0 !important;\n\t\tpadding-right: 0 !important;\n\t\tmargin-left: -#{g-get-state-var(gutter-left)};\n\t\tmargin-right: -#{g-get-state-var(gutter-right)};\n\t\t// font-size:0; // to avoid problems with inline-block margins\n\n\t\t@if $reverse {\n\t\t\ttransform : rotateX(180deg);\n\n\t\t\t> #{_g-get-generic-selector(grid)} {\n\t\t\t\ttransform : rotateX(-180deg);\n\t\t\t}\n\t\t}\n\n\t\t// do this only when not in generate phase\n\t\t// mean that we use the mixin directly\n\t\t@if _g-is-in-generate-phase() == false {\n\t\t\t@each $stateName, $state in g-get-states() {\n\t\t\t\t@include g-state($state) {\n\t\t\t\t\t& #{str-replace(#{&},\".state-#{g-get-state-var(name, $state)}\",\"\")} {\n\t\t\t\t\t\tmargin-left: -#{g-get-state-var(gutter-left, $state)};\n\t\t\t\t\t\tmargin-right: -#{g-get-state-var(gutter-right, $state)};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n@mixin _g-common-nowrap(\n\t$state : default\n) {\n\twhite-space: nowrap;\n\n\t> * {\n\t\twhite-space: normal;\n\t}\n}\n/**\n * Apply a nowrap on the element\n * @example \tscss\n * .my-cool-element {\n * \t\\@include g-nowrap();\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-nowrap() {\n\t@include _g-call(nowrap) {\n\t}\n}\n\n\n@mixin _g-common-wrap(\n\t$state : default\n) {\n\twhite-space:normal;\n}\n/**\n * Reset the nowrap on the element\n * @example \tscss\n * .my-cool-element {\n * \t\\@include g-wrap();\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-wrap() {\n\t@include _g-call(wrap) {\n\t}\n}\n\n\n@mixin _g-common-grid(\n\t$state : default\n) {\n\t// vars\n\t$direction : g-get-state-var(direction, $state);\n\n\t// css\n\tdisplay:inline-block;\n\t// height: inherit;\n\tmin-height:1px;\n\t// max-height:inherit;\n\t// line-height:1;\n\t@if $direction == rtl {\n\t\tfloat:right;\n\t} @else {\n\t\tfloat:left;\n\t}\n\t// font-size:1rem; // reset the font size\n\tbox-sizing: border-box;\n\tvertical-align: top;\n\t@include g-gutter();\n\n\t// handle direction attribute\n\t@if g-get-state-var(dir-attribute, $state) {\n\t\t[dir=\"rtl\"] & {\n\t\t\tfloat: right;\n\t\t}\n\t\t[dir=\"ltr\"] & {\n\t\t\tfloat: left;\n\t\t}\n\t}\n}\n/**\n * Apply a column width on the element\n * @param \t\t{Integer|String} \t\t$columns \t\t\tThe column count to apply or a registered column name\n * @param \t\t{Integer} \t\t\t\t[$context=null]  \tThe context on which to calculate the column width. If null, take the context setted with ```g-setup```\n * @example \tscss\n * .my-cool-column {\n * \t\\@include g-grid(2);\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-grid(\n\t$columns,\n\t$context : null\n) {\n\t@if $columns == grow {\n\t\t@include g-grid-grow();\n\t} @else if $columns == adapt {\n\t\t@include g-grid-adapt();\n\t} @else {\n\n\t\t@include _g-call(grid) {\n\n\t\t\t// vars\n\t\t\t$name : g-get-state-var(name);\n\t\t\t@if type-of($context) != number {\n\t\t\t\t$context : g-get-state-var(context);\n\t\t\t}\n\t\t\t$name-multiplicator : g-get-state-var(name-multiplicator);\n\t\t\t$gutter-left : g-get-state-var(gutter-left);\n\t\t\t$gutter-right : g-get-state-var(gutter-right);\n\t\t\t$column-width : g-get-state-var(column-width);\n\n\t\t\t// manage columns\n\t\t\t@if type-of($columns) != number and g-has-column($columns) {\n\t\t\t\t// the columns is a saved one, get the context and column value\n\t\t\t\t$column : map-get($_g-columns, $columns);\n\t\t\t\t$context : map-get($column, context);\n\t\t\t\t$columns : map-get($column, columns);\n\t\t\t} @else if type-of($columns) == number {\n\t\t\t\t// check if we have a ratio\n\t\t\t\t@if $columns < 1 {\n\t\t\t\t\t$columns : $context / 100 * ($columns * 100);\n\t\t\t\t}\n\t\t\t\t$columns : $columns / $name-multiplicator;\n\t\t\t} @else {\n\t\t\t\t@error \"the column #{$columns} does not exist...\";\n\t\t\t}\n\n\t\t\t// width :\n\t\t\t$width : 0;\n\t\t\t@if $column-width {\n\t\t\t\t$width : $column-width * $columns;\n\t\t\t} @else {\n\t\t\t\t$width : percentage(1 / $context * $columns);\n\t\t\t}\n\n\t\t\t// set value :\n\t\t\twidth:$width;\n\t\t}\n\t}\n}\n\n\n@mixin _g-common-grid-table(\n\t$state : default\n) {\n}\n/**\n * Set the grid element as a table display type\n * @example \tscss\n * .my-cool-column {\n * \t\\@include g-grid(2);\n * \t\\@include g-grid-table();\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-grid-table(\n) {\n\t@include _g-call(grid-table) {\n\t\tdisplay: table-cell;\n\t\tfloat: none;\n\t\tvertical-align: top;\n\t}\n}\n\n\n@mixin _g-common-row-full(\n\t$state : default\n) {\n}\n/**\n * Set the width of the row element to full viewport width\n * @example \tscss\n * .my-cool-row {\n *  \\@include g-row();\n * \t\\@include g-row-full();\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-row-full(\n) {\n\t@include _g-call(row-full) {\n\t\t$direction : g-get-state-var(direction);\n\t\twidth: 100vw;\n\t\t@if $direction == ltr {\n\t\t\tmargin-left:50% !important;\n\t\t\tmargin-right:0 !important;\n\t\t\ttransform: translateX(-50%);\n\t\t} @else {\n\t\t\tmargin-right:50% !important;\n\t\t\tmargin-left:0 !important;\n\t\t\ttransform: translateX(50%);\n\t\t}\n\t\t@if g-get-state-var(dir-attribute) {\n\t\t\t[dir=\"ltr\"] & {\n\t\t\t\tmargin-left:50% !important;\n\t\t\t\tmargin-right:0 !important;\n\t\t\t\ttransform: translateX(-50%);\n\t\t\t}\n\t\t\t[dir=\"rtl\"] & {\n\t\t\t\tmargin-right:50% !important;\n\t\t\t\tmargin-left:0 !important;\n\t\t\t\ttransform: translateX(50%);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n@mixin _g-common-grid-adapt(\n\t$state : default\n) {\n\tdisplay: table-cell;\n\twidth:1px;\n\twhite-space:nowrap !important;\n\t// line-height:1;\n\tbox-sizing: border-box;\n\t@include g-gutter();\n}\n/**\n * Set the width of the grid element to adapt to his content\n * @example \tscss\n * .my-cool-column {\n *  \\@include g-grid-adapt();\n *  // or\n *  \\@include g-grid(adapt);\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-grid-adapt(\n) {\n\t@include _g-call(grid-adapt) {\n\t}\n}\n\n\n@mixin _g-common-grid-grow(\n\t$state : default\n) {\n\tdisplay: table-cell;\n\twidth:99999px;\n\t// line-height:1;\n\tbox-sizing: border-box;\n\t@include g-gutter();\n\n}\n/**\n * Set the width of the grid element to grow depending on the place it has at disposal\n * @example \tscss\n * .my-cool-column {\n *  \\@include g-grid-grow();\n *  // or\n *  \\@include g-grid(grow);\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-grid-grow(\n) {\n\t@include _g-call(grid-grow) {\n\t}\n}\n\n\n//\n// Order\n//\n@mixin _g-common-order(\n\t$state : default\n) {\n}\n@mixin g-order(\n\t$position\n) {\n\t@include _g-call(order) {\n\t}\n}\n\n\n@mixin _g-common-clear-each(\n\t$state : default\n) {\n}\n/**\n * Clear each n childs\n * @example \tscss\n * .my-cool-row {\n *  \\@include g-clear-each(2);\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-clear-each(\n\t$clearEach,\n\t$clearWhat : both\n) {\n\t@include _g-call(clear-each) {\n\t\t$grid : map-get($_gridle-packages, grid);\n\t\t$sel : map-get($grid, generic-selector);\n\t\t@if not $sel {\n\t\t\t$sel : _g-get-generic-selector(grid);\n\t\t}\n\n\t\t> #{$sel}:nth-of-type(1n+0) {\n\t\t\tclear:none;\n\t\t}\n\t\t> #{$sel}:nth-of-type(#{$clearEach}n+1) {\n\t\t\tclear : $clearWhat;\n\t\t}\n\t}\n}\n\n\n@mixin _g-common-row-align(\n\t$state : default\n) {\n}\n/**\n * Set the alignement of the columns inside the row using these alignement properties:\n *\n * - top : Align vertical top\n * - middle : Align vertical middle\n * - bottom : Align vertical bottom\n * - left : Align horizontal left\n * - center : Align horizontal center\n * - right : Align horizontal right\n *\n * @example \tscss\n * .my-cool-row {\n *  \\@include g-row-align(middle center);\n *  \\@include g-row-align(right);\n *  \\@include g-row-align(middle);\n *  // etc...\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com>\n */\n@mixin g-row-align(\n\t$align : middle\n) {\n\t@include _g-call(row-align) {\n\t\t// need to change the way grids items are layed out\n\t\t@if in-map($align, top) of in-map($align, middle) or in-map($align, bottom) {\n\t\t\tfont-size:0;\n\t\t\tword-spacing:0;\n\t\t\tletter-spacing:0;\n\t\t\tclear:both;\n\n\t\t\t> * {\n\t\t\t\tword-spacing:normal;\n\t\t\t\tletter-spacing:normal;\n\t\t\t\tfloat:none !important;\n\t\t\t\t@if in-map($align, bottom) {\n\t\t\t\t\tvertical-align:bottom;\n\t\t\t\t} @elseif in-map($align, middle) {\n\t\t\t\t\tvertical-align:middle;\n\t\t\t\t} @else {\n\t\t\t\t\tvertical-align:top;\n\t\t\t\t}\n\t\t\t\tfont-size:1rem;\n\t\t\t}\n\t\t}\n\n\t\t@each $a in $align {\n\t\t\t@if $a == left {\n\t\t\t\ttext-align: left;\n\t\t\t} @else if $a == center {\n\t\t\t\ttext-align: center;\n\t\t\t} @else if $a == right {\n\t\t\t\ttext-align: right;\n\t\t\t} @else if $a == top {\n\t\t\t\tvertical-align: top;\n\t\t\t} @else if $a == middle {\n\t\t\t\tvertical-align: middle;\n\t\t\t} @else if $a == bottom {\n\t\t\t\tvertical-align: bottom;\n\t\t\t}\n\t\t}\n\n\t\t@if in-map($align, center) or in-map($align, right) {\n\t\t\t// restore text align of the grid items\n\t\t\t> * {\n\t\t\t\ttext-align: left;\n\t\t\t}\n\t\t}\n\t}\n}\n","$brand-gray: #f2f2f2;\n$brand-dark-gray: #dedede;\n$brand-blue: #2a3052;\n$brand-dark-blue: #15212d;\n$brand-orange: #e98024;\n$brand-btn: #2e8836;\n$brand-btn-active: #14602b;\n$brand-primary-dark: #15212d;\n$white: #ffffff;\n$black: #000000;\n$toolbox-btn-active: #dddddd;\n\n$chart-text: desaturate($brand-blue, 50%);\n$chart-background: $white;\n\n$chart-text-inverse: desaturate(lighten($brand-blue, 50%), 50%);\n$chart-background-inverse: #161a24;\n\n$primaryBrandColor: #2a3052;\n$darkPrimaryBrandColor: #15212d;\n$secondaryBrandColor: #e98024;\n$contentColor: #000;\n$contentInverseColor: #fff;\n$secondaryContentColor: #c2c2c2;\n$borderColor: #dedede;\n$fillColor: #f2f2f2;\n$positiveColor: #2e8836;\n$darkPositiveColor: #14602b;\n$negativeColor: #c03;\n$noticeColor: #fef1cf;\n$chartColor: #6b8fb9;\n$chartAreaColor: rgba(128, 179, 236, 0.3);\n$lightBlue: #29abe2;\n$darkGray: #44484c;\n$darkWhite: #ccc;","$LANGUAGE_DIRECTION : ltr;\n$IS_LTR : true;\n\n$CONTENT_WIDTH: 1000px;\n$READABLE_CONTENT_WIDTH: 700px;\n\n$BORDER_RADIUS: 3px;\n$PAGE_PADDING: 0.5em;\n$HEADER_HEIGHT: 3rem;\n$HEADER_HEIGHT_MOBILE: 5rem;\n$BOX_SHADOW: 0 0 50px 0 rgba(0, 0, 0, 0.25);\n\n$FONT_BASE: 15px;\n$FONT_SCALE: 1.2;\n$LINE_HEIGHT: 1.25;\n\n// Use only these font sizes throughout the site\n\n$FONT_SIZE_XXXL: 2em;\n$FONT_SIZE_XXL: 1.7em;\n$FONT_SIZE_XL: 1.4em;\n$FONT_SIZE_L: 1.2em;\n$FONT_SIZE_N: 1em;\n$FONT_SIZE_S: 0.85em;\n$FONT_SIZE_XS: $FONT_BASE / $FONT_SCALE / $FONT_SCALE;                // .75614rem   =~ 12px\n$FONT_SIZE_XXS: $FONT_BASE / $FONT_SCALE / $FONT_SCALE / $FONT_SCALE; // .65752rem   =~ 10px\n\n$FONT_SIZE_DESKTOP: 12px;\n$FONT_SIZE_MOBILE: 14px;\n\n// Brand colors and derivatives\n/* stylelint-disable color-no-hex */\n$COLOR_TEXT: #3d474d;\n$COLOR_CONTROL_BORDER: #dadada;\n$COLOR_ACTIVE: #ff992a;\n\n$COLOR_NAV: #a1aab3;\n$COLOR_NAV_ACTIVE: #929ca6;\n$COLOR_NAV_BORDER: $primaryBrandColor; // #2a3052\n\n$COLOR_ORANGE: $secondaryBrandColor; // #e98024\n$COLOR_DARK_ORANGE: #d17320;\n$COLOR_LIGHT_BLUE: $lightBlue;       // #29abe2\n$COLOR_BLUE: $primaryBrandColor;     // #2a3052;\n$COLOR_BLUE_SHADE: #394171;\n$COLOR_DARK_BLUE: $darkPrimaryBrandColor; // #15212d\n\n// Utility colors\n$COLOR_BLACK: $black;\n$COLOR_WHITE: $white;\n$COLOR_DARK_WHITE: #ccc;\n\n// Colors used for secondary purposes. To be used sparingly\n$COLOR_RED           : $negativeColor; // #c03\n$COLOR_YELLOW        : $noticeColor;   // #fef1cf\n$COLOR_LIGHT_GRAY    : $fillColor;     // #f2f2f2\n$COLOR_GRAY          : $borderColor;   // #dedede\n$COLOR_DARK_GRAY     : #44484c;\n$COLOR_GREEN         : $positiveColor; // #2e8836\n/* stylelint-enable color-no-hex */\n\n// colors to remove\n$COLOR_GRAY_SHADE: $secondaryContentColor; // #c2c2c2\n$COLOR_DARK_GREEN: $darkPositiveColor;     // #14602b","\n#footer {\n    .container {\n        max-width: 1200px;\n    }\n    #footer-menu {\n        h4 {\n            font-size: $FONT_SIZE_S;\n        }\n        ul {\n            padding: 0px;\n        }\n        li {\n            line-height: 1;\n            word-wrap: break-word;\n            -webkit-hyphens: auto;\n            -ms-hyphens: auto;\n            -moz-hyphens: auto;\n            hyphens: auto;\n        }\n    }\n    .content-inverse-color a {\n        text-decoration: underline;\n    }\n    #footer-regulatory {\n        padding-bottom: 30px;\n\n        a, p, .fld-risk-warning legend {\n            font-size: 13px !important;\n        }\n        a, p {\n            font-weight: 100;\n        }\n        a {\n            color: $COLOR_GRAY;\n        }\n        p, .fld-risk-warning legend {\n            color: #a8a8a8; // stylelint-disable color-no-hex\n            text-align: justify;\n            margin: 0 0 10px;\n        }\n        .fld-risk-warning {\n            border-color: $COLOR_DARK_GRAY;\n\n            legend {\n                text-transform: uppercase;\n            }\n        }\n        .about-binary {\n            border-top: 1px solid $COLOR_DARK_GRAY;\n            border-bottom: 1px solid $COLOR_DARK_GRAY;\n            padding: 10px 0;\n            margin-bottom: 10px;\n\n            p {\n                margin: 0;\n            }\n        }\n        .risk-warning {\n            p {\n                font-size: 16px;\n            }\n        }\n        #ratelimit-error-message, #site-status-message {\n            position: fixed;\n            top: 0;\n            width: 100%;\n            background-color: $COLOR_YELLOW;\n            z-index: 999;\n        }\n        #site-status-message {\n            z-index: 9999;\n        }\n    }\n    .iom-icon {\n        width: 90px;\n    }\n    .lga-icon {\n        width: 100px;\n    }\n    .gamstop-icon {\n        width: 109px;\n    }\n    .gamstop-icon.data-show-visible + .lga-icon {\n        width: 70px;\n        margin-bottom: 3px;\n        margin-left: -10px;\n    }\n    .flex-row {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n    }\n    .lga-gamstop-icon-container {\n        display: flex;\n        align-items: flex-start;\n        flex-direction: column-reverse;\n    }\n    .social-icons {\n        margin-left: auto;\n\n        > *:not(:first-child) {\n            margin-left: 10px;\n        }\n        img {\n            height: 35px;\n            width: 35px;\n        }\n    }\n    .icon-row {\n        padding-top: 10px;\n        padding-bottom: 14px;\n    }\n    .regulation-logos {\n        > * {\n            margin-right: 20px;\n        }\n        .vanuatu-icon {\n            width: 160px;\n            margin-left: -30px;\n            margin-right: 0;\n        }\n        .bvi-icon {\n            width: 115px;\n            margin-left: -30px;\n            margin-right: 0;\n        }\n        .labuan-icon {\n            width: 120px;\n        }\n    }\n    #end-note {\n        line-height: 25px;\n        background: $COLOR_RED;\n        font-size: $FONT_SIZE_XS;\n        position: fixed;\n        bottom: 0;\n        z-index: 10000;\n        width: 100%;\n    }\n    #status_notification {\n        animation: moveInBottom 0.2s ease-in;\n        background-color: $COLOR_ORANGE;\n        display: none;\n        align-items: center;\n        padding: 10px 7px;\n        position: fixed;\n        bottom: 8px;\n        right: 8px;\n        left: 8px;\n        border-radius: 5px;\n        z-index: 1000;\n\n        &_text {\n            color: $COLOR_WHITE;\n            font-size: $FONT_SIZE_S;\n            margin: 0 auto 0 0;\n        }\n        &_type {\n            padding-right: 7px;\n        }\n        &_close {\n            padding-left: 7px;\n\n            &:hover {\n                cursor: pointer;\n            }\n        }\n    }\n    @media screen and (max-width: 590px) {\n        .icon-row {\n            flex-direction: column;\n\n            > * {\n                margin-right: 0;\n                margin-bottom: 20px;\n            }\n        }\n        .social-icons {\n            margin-left: 0;\n        }\n    }\n}\n"],"names":[],"mappings":"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"}